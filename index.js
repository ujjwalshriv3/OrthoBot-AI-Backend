const port = process.env.PORT || 3000;
const express = require('express');
const axios = require('axios');
const fs = require('fs');
const cors = require('cors');
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Groq } = require('groq-sdk');
const { createClient } = require('@supabase/supabase-js');
const { CohereClient } = require('cohere-ai');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(cors());

// Clean OrthoBot Response Formatter
function formatOrthoResponse(userQuery, kbInfo, aiResponse) {
  console.log('ЁЯОп Using actual AI response for query:', userQuery);
  console.log('ЁЯУЭ AI Response length:', aiResponse?.length || 0);
  console.log('ЁЯУЪ KB Info:', kbInfo?.title || 'No title');
  console.log('ЁЯФЧ KB URL:', kbInfo?.url || 'No URL in KB');
  
  // Detect if user query is in Hindi
  const isHindiQuery = /[\u0900-\u097F]/.test(userQuery) || 
    userQuery.toLowerCase().includes('hindi') ||
    userQuery.toLowerCase().includes('bhai') ||
    userQuery.toLowerCase().includes('kon') ||
    userQuery.toLowerCase().includes('kya') ||
    userQuery.toLowerCase().includes('kaise') ||
    userQuery.toLowerCase().includes('dikha') ||
    userQuery.toLowerCase().includes('batao') ||
    userQuery.toLowerCase().includes('kaun') ||
    userQuery.toLowerCase().includes('hai');
  
  // Detect if user query is specifically in English
  const isEnglishQuery = userQuery.toLowerCase().includes('who is') ||
    userQuery.toLowerCase().includes('what is') ||
    userQuery.toLowerCase().includes('tell me about') ||
    userQuery.toLowerCase().includes('about dr') ||
    userQuery.toLowerCase().includes('dr rameshwar kumar') ||
    (!isHindiQuery && /^[a-zA-Z\s?.,!]+$/.test(userQuery));
  
  console.log('ЁЯМР Language detected - Hindi:', isHindiQuery, 'English:', isEnglishQuery, 'for query:', userQuery);

    
  
  // Use the actual AI response as base, but enhance it with KB info
  let finalResponse = aiResponse || 'рдореБрдЭреЗ рдЦреБрд╢реА рд╣реЛрдЧреА рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдореЗрдВред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВред';
  
  // Add KB title and summary if available
  if (kbInfo?.title) {
    let title = kbInfo.title;
    
    // Clean up technical terms from title
    title = title.replace(/courseVideos_kb\.json/gi, '')
                 .replace(/courseTitle/gi, '')
                 .replace(/\.json/gi, '')
                 .replace(/_kb/gi, '')
                 .replace(/kb_/gi, '')
                 .replace(/\s+>/g, '')
                 .replace(/>\s+/g, '')
                 .trim();
    
    // Convert technical titles to user-friendly ones
    if (title.includes('6 Weeks Knee Pain Relief')) {
      title = isEnglishQuery ? '6 Weeks Knee Pain Relief Challenge Course' : '6 рд╕рдкреНрддрд╛рд╣ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд рдЪреБрдиреМрддреА рдХреЛрд░реНрд╕';
    } else if (title.includes('Rameshwar Kumar') || title.includes('Dr. Rameshwar')) {
      title = isEnglishQuery ? 'Dr. Rameshwar Kumar - Chief Physiotherapist' : 'рдбреЙ. рд░рд╛рдореЗрд╢реНрд╡рд░ рдХреБрдорд╛рд░ - рдореБрдЦреНрдп рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкрд┐рд╕реНрдЯ';
    } else if (title.includes('Morning Physiotherapy')) {
      title = isEnglishQuery ? 'Daily Morning Physiotherapy Session' : 'рджреИрдирд┐рдХ рд╕реБрдмрд╣ рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкреА рд╕рддреНрд░';
    } else if (title.toLowerCase().includes('course') || title.toLowerCase().includes('video')) {
      title = isEnglishQuery ? 'Knee Health Education' : 'рдШреБрдЯрдиреЗ рдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреА рдЬрд╛рдирдХрд╛рд░реА';
    } else if (title.toLowerCase().includes('masterclass')) {
      title = isEnglishQuery ? 'Expert Masterclass Session' : 'рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдорд╛рд╕реНрдЯрд░рдХреНрд▓рд╛рд╕ рд╕рддреНрд░';
    } else if (title.toLowerCase().includes('webinar')) {
      title = isEnglishQuery ? 'Health Education Webinar' : 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╢рд┐рдХреНрд╖рд╛ рд╡реЗрдмрд┐рдирд╛рд░';
    }
    
    // Only add title if it's meaningful and not empty
    if (title && title.length > 2) {
      finalResponse = `ЁЯж╡ ${title}\n\n${finalResponse}`;
    }
  }
  
  // Add context-specific summary for Dr. Rameshwar
  if (kbInfo?.content && (kbInfo.content.includes('Rameshwar') || userQuery.toLowerCase().includes('rameshwar'))) {
    if (isEnglishQuery) {
      const rameshwarSummary = `Dr. Rameshwar Kumar is an expert physiotherapist and Chief Physiotherapist who conducts daily morning exercise sessions for knee health. He specializes in home-based exercises, rehabilitation programs, and provides comprehensive guidance for knee pain relief.

ЁЯСитАНтЪХя╕П Dr. Rameshwar Kumar is also an experienced orthopedic and joint replacement surgeon with over 18 years of practice. He has earned MBBS, MS, DNB, and M.Ch (Ortho) degrees.

ЁЯПе His Achievements:
тАв 20,000+ orthopedic and joint replacement surgeries
тАв 150+ free surgeries for poor people
тАв Trained 7,000+ health workers in first aid
тАв Conducted 300+ health camps in villages
тАв Consulted 7+ lakh patients
тАв 10+ million social media reach

ЁЯОп Founder of Save The Knee Mission:
Dr. Rameshwar realized he could help people heal from knee pain without surgery or medications. He developed Miracle MP rituals and dedicated his life to serving people through natural healing methods. He offers personalized coaching, evidence-based treatment approaches, and helps patients avoid surgery through natural healing methods. His morning sessions include physiotherapy exercises, meditation, and holistic wellness approaches for orthopedic conditions.

ЁЯПв Legal Entity: Shreesai Hospital & Trauma Center Private Limited
ЁЯУН Address: Surgeon Lane, Bangaliu Pakri, Gaushala Road, Siwan, Bihar тАУ 841226

ЁЯУЮ Contact Details:
тАв Website: https://drrameshwarkumar.in/
тАв Clinic Address: C-1/101, Pankha Rd, Block C1, Janakpuri, Delhi, 110059
тАв Phone: +917992271883
тАв Email: care@drrameshwarkumar.in
тАв YouTube: https://www.youtube.com/@DrRameshwarkumar
тАв Hospital: https://srisaihospitalsiwan.com/`;
      finalResponse += `\n\nЁЯУЛ About Dr. Rameshwar Kumar:\n${rameshwarSummary}`;
    } else {
      const rameshwarSummary = `рдбреЙ. рд░рд╛рдореЗрд╢реНрд╡рд░ рдХреБрдорд╛рд░ рдПрдХ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкрд┐рд╕реНрдЯ рдФрд░ рдореБрдЦреНрдп рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкрд┐рд╕реНрдЯ рд╣реИрдВ рдЬреЛ рдШреБрдЯрдиреЗ рдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рд▓рд┐рдП рджреИрдирд┐рдХ рд╕реБрдмрд╣ рд╡реНрдпрд╛рдпрд╛рдо рд╕рддреНрд░ рдЖрдпреЛрдЬрд┐рдд рдХрд░рддреЗ рд╣реИрдВред рд╡реЗ рдШрд░-рдЖрдзрд╛рд░рд┐рдд рд╡реНрдпрд╛рдпрд╛рдо, рдкреБрдирд░реНрд╡рд╛рд╕ рдХрд╛рд░реНрдпрдХреНрд░рдореЛрдВ рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИрдВ рдФрд░ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд рдХреЗ рд▓рд┐рдП рд╡реНрдпрд╛рдкрдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред

ЁЯСитАНтЪХя╕П рдбреЙ. рд░рд╛рдореЗрд╢реНрд╡рд░ рдХреБрдорд╛рд░ рдПрдХ рдЕрдиреБрднрд╡реА рдСрд░реНрдереЛрдкреЗрдбрд┐рдХ рдФрд░ рдЬреЙрдЗрдВрдЯ рд░рд┐рдкреНрд▓реЗрд╕рдореЗрдВрдЯ рд╕рд░реНрдЬрди рднреА рд╣реИрдВ рдЬреЛ 18 рд╕рд╛рд▓ рд╕реЗ рдЕрдзрд┐рдХ рд╕рдордп рд╕реЗ рдкреНрд░реИрдХреНрдЯрд┐рд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВред рдЙрдиреНрд╣реЛрдВрдиреЗ MBBS, MS, DNB, рдФрд░ M.Ch (Ortho) рдХреА рдбрд┐рдЧреНрд░реА рд╣рд╛рд╕рд┐рд▓ рдХреА рд╣реИред

ЁЯПе рдЙрдирдХреА рдЙрдкрд▓рдмреНрдзрд┐рдпрд╛рдВ:
тАв 20,000+ рдСрд░реНрдереЛрдкреЗрдбрд┐рдХ рдФрд░ рдЬреЙрдЗрдВрдЯ рд░рд┐рдкреНрд▓реЗрд╕рдореЗрдВрдЯ рд╕рд░реНрдЬрд░реА
тАв 150+ рдЧрд░реАрдм рд▓реЛрдЧреЛрдВ рдХреЗ рд▓рд┐рдП рдореБрдлреНрдд рд╕рд░реНрдЬрд░реА
тАв 7,000+ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХрд░реНрдордЪрд╛рд░рд┐рдпреЛрдВ рдХреЛ рдкреНрд░рд╛рдердорд┐рдХ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдХрд╛ рдкреНрд░рд╢рд┐рдХреНрд╖рдг
тАв 300+ рдЧрд╛рдВрд╡реЛрдВ рдореЗрдВ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╢рд┐рд╡рд┐рд░
тАв 7 рд▓рд╛рдЦ+ рдорд░реАрдЬреЛрдВ рдХреЛ рдкрд░рд╛рдорд░реНрд╢
тАв 10 рдорд┐рд▓рд┐рдпрди+ рд╕реЛрд╢рд▓ рдореАрдбрд┐рдпрд╛ рд░реАрдЪ

ЁЯОп Save The Knee Mission рдХреЗ рд╕рдВрд╕реНрдерд╛рдкрдХ:
рдбреЙ. рд░рд╛рдореЗрд╢реНрд╡рд░ рдиреЗ рдорд╣рд╕реВрд╕ рдХрд┐рдпрд╛ рдХрд┐ рд╡реЗ рдмрд┐рдирд╛ рд╕рд░реНрдЬрд░реА рдФрд░ рджрд╡рд╛рдУрдВ рдХреЗ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рд╕реЗ рд░рд╛рд╣рдд рджрд┐рд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВред рдЙрдиреНрд╣реЛрдВрдиреЗ Miracle MP rituals рд╡рд┐рдХрд╕рд┐рдд рдХрд┐рдП рдФрд░ рдЕрдкрдирд╛ рдЬреАрд╡рди рд▓реЛрдЧреЛрдВ рдХреА рд╕реЗрд╡рд╛ рдореЗрдВ рд╕рдорд░реНрдкрд┐рдд рдХрд░ рджрд┐рдпрд╛ред рд╡реЗ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдХреЛрдЪрд┐рдВрдЧ, рд╕рд╛рдХреНрд╖реНрдп-рдЖрдзрд╛рд░рд┐рдд рдЙрдкрдЪрд╛рд░ рджреГрд╖реНрдЯрд┐рдХреЛрдг рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВ рдФрд░ рд░реЛрдЧрд┐рдпреЛрдВ рдХреЛ рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЙрдкрдЪрд╛рд░ рд╡рд┐рдзрд┐рдпреЛрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╕рд░реНрдЬрд░реА рд╕реЗ рдмрдЪрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреЗ рд╣реИрдВред

ЁЯПв рдХрд╛рдиреВрдиреА рдЗрдХрд╛рдИ: Shreesai Hospital & Trauma Center Private Limited
ЁЯУН рдкрддрд╛: Surgeon Lane, Bangaliu Pakri, Gaushala Road, Siwan, Bihar тАУ 841226

ЁЯУЮ рд╕рдВрдкрд░реНрдХ рд╡рд┐рд╡рд░рдг:
тАв рд╡реЗрдмрд╕рд╛рдЗрдЯ: https://drrameshwarkumar.in/
тАв рдХреНрд▓рд┐рдирд┐рдХ рдкрддрд╛: C-1/101, Pankha Rd, Block C1, Janakpuri, Delhi, 110059
тАв рдлреЛрди: +917992271883
тАв рдИрдореЗрд▓: care@drrameshwarkumar.in
тАв YouTube: https://www.youtube.com/@DrRameshwarkumar
тАв рдЕрд╕реНрдкрддрд╛рд▓: https://srisaihospitalsiwan.com/`;
      finalResponse += `\n\nЁЯУЛ рдбреЙ. рд░рд╛рдореЗрд╢реНрд╡рд░ рдХреБрдорд╛рд░ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ:\n${rameshwarSummary}`;
    }
  }
  // Add summary from KB if available and different from AI response (for other content)
  else if (kbInfo?.summary && !finalResponse.includes(kbInfo.summary.substring(0, 50))) {
    let summary = kbInfo.summary;
    if (summary.length > 300) {
      summary = summary.substring(0, 300) + '...';
    }
    finalResponse += `\n\nЁЯУЛ ${isEnglishQuery ? 'Key Information:' : 'рдореБрдЦреНрдп рдЬрд╛рдирдХрд╛рд░реА:'}\n${summary}`;
  }
  
  // Get video URL from KB first, then fallback to mapping
  let videoUrl = kbInfo?.url;
  
  // If no URL in KB, try to find relevant URL based on content and query
  if (!videoUrl && kbInfo?.content) {
    const content = kbInfo.content.toLowerCase();
    const query = userQuery.toLowerCase();
    console.log('ЁЯФН Searching for video URL based on content and query...');
    
    // Course Videos KB URLs (Complete List)
    if (content.includes('6 weeks') || content.includes('course') || query.includes('course')) {
      videoUrl = 'https://www.youtube.com/watch?v=j71zF4ofgr8'; // Introduction Video
    } else if (content.includes('basic knowledge') || query.includes('basic')) {
      videoUrl = 'https://www.youtube.com/watch?v=wwm4waoO3oU'; // Basic Knowledge Series
    } else if (content.includes('causes') || content.includes('рдХрд╛рд░рдг')) {
      videoUrl = 'https://www.youtube.com/watch?v=MXmS5ED87T0'; // Main Causes Of Knee Pain
    } else if (content.includes('symptoms') || content.includes('рд▓рдХреНрд╖рдг')) {
      videoUrl = 'https://www.youtube.com/watch?v=bAzw-3FX3z0'; // Symptoms Of Cartilage Damage
    } else if (content.includes('diagnosis') || content.includes('рдирд┐рджрд╛рди')) {
      videoUrl = 'https://www.youtube.com/watch?v=2cETcxcr4q4'; // How to confirm diagnosis
    } else if (content.includes('arthritis grade') || content.includes('womac')) {
      videoUrl = 'https://www.youtube.com/watch?v=fMvqaPRe8KM'; // Knee arthritis grade and WOMAC score
    } else if (content.includes('treatment') || content.includes('рдЗрд▓рд╛рдЬ')) {
      videoUrl = 'https://www.youtube.com/watch?v=78IMjmNQQY0'; // Treatment options
    } else if (content.includes('call to action') || content.includes('activities')) {
      videoUrl = 'https://www.youtube.com/watch?v=zMRj8CF0n3s'; // Call To Action
    } else if (content.includes('pain management') || query.includes('pain management')) {
      videoUrl = 'https://www.youtube.com/watch?v=MIElsmWZKHc'; // Pain Management Module
    } else if (content.includes('medicine') || content.includes('рджрд╡рд╛')) {
      videoUrl = 'https://www.youtube.com/watch?v=oO859kzPkao'; // Medicine knowledge
    } else if (content.includes('home remedies') || content.includes('рдШрд░реЗрд▓реВ')) {
      videoUrl = 'https://www.youtube.com/watch?v=4L7aNdpuw3w'; // Home remedies
    } else if (content.includes('hot') || content.includes('cold') || content.includes('therapy')) {
      videoUrl = 'https://www.youtube.com/watch?v=MIVp_V-Dre4'; // Hot or cold therapy
    } else if (content.includes('severe pain') || content.includes('рдЕрддреНрдпрдзрд┐рдХ рджрд░реНрдж')) {
      videoUrl = 'https://www.youtube.com/watch?v=dSkjl5wgMG0'; // Severe Pain Relief Exercises
    } else if (content.includes('diet') || content.includes('food') || content.includes('рдЖрд╣рд╛рд░')) {
      videoUrl = 'https://www.youtube.com/watch?v=8LsPh3TEbdk'; // Diet and foods
    } else if (content.includes('painkiller') || content.includes('complication')) {
      videoUrl = 'https://www.youtube.com/watch?v=7oAiIWlUDjk'; // Painkiller complications
    } else if (content.includes('call to action') && content.includes('pain')) {
      videoUrl = 'https://www.youtube.com/watch?v=02pVUTdFYYo'; // Pain Management Call to Action
    } else if (content.includes('early stage') || content.includes('exercise') || content.includes('рд╡реНрдпрд╛рдпрд╛рдо')) {
      videoUrl = 'https://www.youtube.com/watch?v=9mS9jm54dlE'; // Early Stage Exercise
    } else if (content.includes('sitting') || content.includes('рдмреИрдардирд╛') || content.includes('ground')) {
      videoUrl = 'https://www.youtube.com/watch?v=8mln2vJLLis'; // How to sit on ground
    } else if (content.includes('pillow') || content.includes('рддрдХрд┐рдпрд╛')) {
      videoUrl = 'https://www.youtube.com/watch?v=AiJ9RWdJsoI'; // Exercise with pillow
    } else if (content.includes('daily life') || content.includes('activity')) {
      videoUrl = 'https://www.youtube.com/watch?v=gZSdOWKOpZ4'; // Daily life activities part 1
    } else if (content.includes('stairs') || content.includes('рд╕реАрдврд╝реА')) {
      videoUrl = 'https://www.youtube.com/watch?v=kXAvqGgQE6k'; // How to climb stairs
    } else if (content.includes('daily life') && content.includes('part 2')) {
      videoUrl = 'https://www.youtube.com/watch?v=P12kzQFad68'; // Daily life activities part 2
    
    // Morning Exercise KB URLs
    } else if (content.includes('rameshwar') || content.includes('morning') || content.includes('physiotherapy') || query.includes('rameshwar') || query.includes('dr rameshwar')) {
      videoUrl = 'https://www.youtube.com/watch?v=kY1vwF5lpFI'; // Morning Physiotherapy Session
      console.log('ЁЯОп Dr. Rameshwar URL matched!');
    
    // Masterclass KB URLs
    } else if (content.includes('masterclass') || content.includes('рдорд╛рд╕реНрдЯрд░рдХреНрд▓рд╛рд╕') || query.includes('masterclass')) {
      videoUrl = 'https://www.youtube.com/watch?v=gxEHLIe1HPc'; // Live Masterclass
    
    // Sunday Webinar KB URLs (Complete List)
    } else if (content.includes('save the knee mission') || content.includes('understanding knee pain')) {
      videoUrl = 'https://www.youtube.com/watch?v=DmZbT7uO8TU'; // Save the Knee Mission
    } else if (content.includes('webinar 1') || (content.includes('webinar') && content.includes('first'))) {
      videoUrl = 'https://www.youtube.com/watch?v=AYvGeHsOOuk'; // Webinar 1
    } else if (content.includes('webinar 2') || (content.includes('webinar') && content.includes('second'))) {
      videoUrl = 'https://www.youtube.com/watch?v=lD7MbWMmuPM'; // Webinar 2
    } else if (content.includes('webinar 4') || content.includes('joint replacement') || content.includes('replacement')) {
      videoUrl = 'https://www.youtube.com/watch?v=G2Pbfj83MbM'; // Webinar 4 - Joint replacement
    } else if (content.includes('webinar 8') || content.includes('knee replacement')) {
      videoUrl = 'https://www.youtube.com/watch?v=EnZPFC98K9Q'; // Webinar 8
    } else if (content.includes('webinar') || query.includes('webinar')) {
      videoUrl = 'https://www.youtube.com/watch?v=DmZbT7uO8TU'; // Default webinar
    
    // YouTube KB URLs - New comprehensive video library
    } else if (content.includes('water in knee') || content.includes('knee effusion') || query.includes('water') || query.includes('рдкрд╛рдиреА') || query.includes('swelling')) {
      videoUrl = 'https://www.youtube.com/watch?v=IwEyTRHujDI'; // Water in knee treatment
    } else if (content.includes('walking') || content.includes('рдЪрд▓рдирд╛') || query.includes('walk') || query.includes('mobility')) {
      videoUrl = 'https://www.youtube.com/watch?v=zuJCdvX6-ns'; // Walking for knee pain relief
    } else if (content.includes('tibia') || content.includes('fibula') || content.includes('fracture') || query.includes('fracture') || query.includes('рд╣рдбреНрдбреА рдЯреВрдЯрдирд╛')) {
      videoUrl = 'https://www.youtube.com/watch?v=JvdQWLvXneE'; // Tibia fibula fracture treatment
    } else if (content.includes('ayushman') || content.includes('рдЖрдпреБрд╖реНрдорд╛рди') || query.includes('ayushman') || query.includes('insurance')) {
      videoUrl = 'https://www.youtube.com/watch?v=_7QGSY80tfE'; // Ayushman Bharat truth
    } else if (content.includes('knee replacement') || content.includes('joint replacement') || query.includes('replacement') || query.includes('рд░рд┐рдкреНрд▓реЗрд╕рдореЗрдВрдЯ')) {
      videoUrl = 'https://www.youtube.com/watch?v=EnZPFC98K9Q'; // Knee replacement webinar
    } else if (content.includes('arthritis') || content.includes('рдЧрдард┐рдпрд╛') || query.includes('arthritis')) {
      videoUrl = 'https://www.youtube.com/watch?v=fMvqaPRe8KM'; // Arthritis grade and WOMAC
    } else if (content.includes('cartilage') || content.includes('рдЙрдкрд╛рд╕реНрдерд┐') || query.includes('cartilage')) {
      videoUrl = 'https://www.youtube.com/watch?v=bAzw-3FX3z0'; // Cartilage damage symptoms
    } else if (content.includes('bone healing') || content.includes('рд╣рдбреНрдбреА рдЬреБрдбрд╝рдирд╛') || query.includes('healing time') || query.includes('bone heal')) {
      videoUrl = 'https://www.youtube.com/watch?v=xPLSBQ1nknc'; // Bone healing process explained
    } else if (content.includes('knee surgery recovery') || content.includes('post operative') || query.includes('after surgery') || query.includes('рдСрдкрд░реЗрд╢рди рдХреЗ рдмрд╛рдж')) {
      videoUrl = 'https://www.youtube.com/watch?v=HI0rSC0Dne0'; // Knee recovery after operation
    } else if (content.includes('back pain') || content.includes('рдХрдорд░ рджрд░реНрдж') || query.includes('back pain') || query.includes('spine')) {
      videoUrl = 'https://www.youtube.com/watch?v=EW9InXq9C0s'; // Back pain treatment
    } else if (content.includes('pain after healing') || content.includes('рд╣рдбреНрдбреА рдЬреБрдбрд╝рдиреЗ рдХреЗ рдмрд╛рдж рджрд░реНрдж') || query.includes('pain after fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=ZQgT3IVBq_c'; // Pain after fracture healing
    } else if (content.includes('plaster') || content.includes('cast') || content.includes('рдкреНрд▓рд╛рд╕реНрдЯрд░') || query.includes('stiffness') || query.includes('рдЬрд╛рдо')) {
      videoUrl = 'https://www.youtube.com/watch?v=na5DAtCkVkg'; // Hand/leg stuck after plaster
    } else if (content.includes('walking training') || content.includes('gait training') || query.includes('walk again') || query.includes('рдЪрд▓рдирд╛ рд╕реАрдЦрдирд╛')) {
      videoUrl = 'https://www.youtube.com/watch?v=yUaSt5hWVGE'; // Walking training after knee operation
    } else if (content.includes('knee test') || content.includes('рдШреБрдЯрдиреЗ рдХреА рдЬрд╛рдВрдЪ') || query.includes('knee diagnosis') || query.includes('identify knee')) {
      videoUrl = 'https://www.youtube.com/watch?v=t9clzjJD4dQ'; // Identify knee disease at home
    } else if (content.includes('running') || content.includes('рджреМрдбрд╝рдирд╛') || query.includes('running') || query.includes('sports')) {
      videoUrl = 'https://www.youtube.com/watch?v=LnX-DH7uIEQ'; // Running after bone fracture
    } else if (content.includes('home remedy') || content.includes('рдШрд░реЗрд▓реВ рдЙрдкрд╛рдп') || query.includes('home treatment')) {
      videoUrl = 'https://www.youtube.com/watch?v=ROuh48N535w'; // Home remedy for knee pain
    } else if (content.includes('femur') || content.includes('thigh bone') || content.includes('рдЬрд╛рдВрдШ рдХреА рд╣рдбреНрдбреА') || query.includes('thigh fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=fpb3idwBBck'; // Femur fracture surgery success
    } else if (content.includes('hip replacement') || content.includes('рд╣рд┐рдк рд░рд┐рдкреНрд▓реЗрд╕рдореЗрдВрдЯ') || query.includes('hip surgery') || query.includes('bilateral hip')) {
      videoUrl = 'https://www.youtube.com/watch?v=4pGok7l-ygo'; // Ayushman Bharat hip replacement
    } else if (content.includes('child fracture') || content.includes('рдмрдЪреНрдЪреЗ рдХреА рд╣рдбреНрдбреА') || query.includes('child thigh') || query.includes('supracondylar')) {
      videoUrl = 'https://www.youtube.com/watch?v=kwX-ztRyU-s'; // Child thigh bone fracture treatment
    } else if (content.includes('painkillers') || content.includes('рджрд░реНрдж рдХреА рджрд╡рд╛') || query.includes('body pain') || query.includes('inflammation')) {
      videoUrl = 'https://www.youtube.com/watch?v=-cvzWhbPrFw'; // Painkillers and body pain
    } else if (content.includes('elderly surgery') || content.includes('рдмреБрдЬреБрд░реНрдЧреЛрдВ рдореЗрдВ рдСрдкрд░реЗрд╢рди') || query.includes('old age surgery') || query.includes('elderly fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=9t5pC0ubPow'; // Elderly bone fracture surgery
    } else if (content.includes('plaster removal') || content.includes('рдкреНрд▓рд╛рд╕реНрдЯрд░ рдирд┐рдХрд▓рдиреЗ рдХреЗ рдмрд╛рдж') || query.includes('after plaster') || query.includes('re-fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=bvkU8cns9sk'; // Precautions after plaster removal
    } else if (content.includes('finger movement') || content.includes('рдЙрдВрдЧрд▓реА рдирд╣реАрдВ рд╣рд┐рд▓рддреА') || query.includes('finger stiffness') || query.includes('hand fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=ogdKp3-uZXo'; // Finger movement after bone healing
    } else if (content.includes('height increase') || content.includes('рд▓рдВрдмрд╛рдИ рдмрдврд╝рд╛рдирд╛') || query.includes('children height') || query.includes('growth')) {
      videoUrl = 'https://www.youtube.com/watch?v=73MFgYFvybQ'; // Height increase in children
    } else if (content.includes('hot cold food') || content.includes('рдЧрд░реНрдо рдардВрдбрд╛ рдЦрд╛рдирд╛') || query.includes('arthritis diet') || query.includes('ayurveda')) {
      videoUrl = 'https://www.youtube.com/watch?v=A4J1e89oAf8'; // Hot cold food for arthritis
    } else if (content.includes('post operative exercise') || content.includes('рдСрдкрд░реЗрд╢рди рдХреЗ рдмрд╛рдж рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ') || query.includes('hand jamming') || query.includes('elbow fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=fACzS3gFme4'; // Exercise after operation
    } else if (content.includes('fracture diet') || content.includes('рдлреНрд░реИрдХреНрдЪрд░ рдореЗрдВ рдЦрд╛рдирд╛') || query.includes('food myths') || query.includes('milk fish')) {
      videoUrl = 'https://www.youtube.com/watch?v=8Lga0yGg98E'; // Diet myths in fracture
    } else if (content.includes('plate removal') || content.includes('рдкреНрд▓реЗрдЯ рдирд┐рдХрд▓рд╡рд╛рдирд╛') || query.includes('implant removal') || query.includes('stress fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=sRHVYuMTrY4'; // When to remove surgical plate
    } else if (content.includes('plaster vs surgery') || content.includes('рдкреНрд▓рд╛рд╕реНрдЯрд░ рдпрд╛ рдСрдкрд░реЗрд╢рди') || query.includes('treatment decision') || query.includes('surgery necessary')) {
      videoUrl = 'https://www.youtube.com/watch?v=JmsSjRLKs0O'; // Plaster vs operation decision
    } else if (content.includes('fracture treatment') || content.includes('рд╣рдбреНрдбреА рдЯреВрдЯрдиреЗ рдкрд░ рдХреНрдпрд╛ рдХрд░реЗрдВ') || query.includes('broken bone') || query.includes('first aid')) {
      videoUrl = 'https://www.youtube.com/watch?v=QdOrhOk-u7o'; // What to do if bone breaks
    } else if (content.includes('limb lengthening') || content.includes('рд▓рдВрдмрд╛рдИ рдмрдврд╝рд╛рдиреЗ рдХрд╛ рдСрдкрд░реЗрд╢рди') || query.includes('height surgery') || query.includes('ilizarov')) {
      videoUrl = 'https://www.youtube.com/watch?v=LnZsKHuvknI'; // Height increase operation
    } else if (content.includes('knee pain treatment') || content.includes('рдШреБрдЯрдиреЗ рдХрд╛ рджрд░реНрдж рдЗрд▓рд╛рдЬ') || query.includes('avoid knee surgery') || query.includes('ozone therapy')) {
      videoUrl = 'https://www.youtube.com/watch?v=xHlYl-5NiYk'; // Non-surgical knee treatment
    } else if (content.includes('plaster mistakes') || content.includes('рдкреНрд▓рд╛рд╕реНрдЯрд░ рдХреА рдЧрд▓рддрд┐рдпрд╛рдВ') || query.includes('bone healing mistakes') || query.includes('non-union')) {
      videoUrl = 'https://www.youtube.com/watch?v=K3vjTmyxSL0'; // Plaster care mistakes
    } else if (content.includes('cycling exercise') || content.includes('рд╕рд╛рдЗрдХрд┐рд▓рд┐рдВрдЧ рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ') || query.includes('air cycling') || query.includes('knee cartilage')) {
      videoUrl = 'https://www.youtube.com/watch?v=Qg586LzvFF8'; // Home cycling exercise for knees
    } else if (content.includes('plaster precautions') || content.includes('рдкреНрд▓рд╛рд╕реНрдЯрд░ рдХреА рд╕рд╛рд╡рдзрд╛рдиреА') || query.includes('cast care') || query.includes('joint movement')) {
      videoUrl = 'https://www.youtube.com/watch?v=DS8JISDJ2zg'; // Plaster precautions for joints
    } else if (content.includes('hip fracture elderly') || content.includes('рдмреБрдЬреБрд░реНрдЧреЛрдВ рдореЗрдВ рд╣рд┐рдк рдлреНрд░реИрдХреНрдЪрд░') || query.includes('intertrochanteric') || query.includes('PFN surgery')) {
      videoUrl = 'https://www.youtube.com/watch?v=djNuKWl0WdM'; // Elderly hip fracture treatment
    } else if (content.includes('back pain causes') || content.includes('рдХрдорд░ рджрд░реНрдж рдХреЗ рдХрд╛рд░рдг') || query.includes('youth back pain') || query.includes('posture')) {
      videoUrl = 'https://www.youtube.com/watch?v=YhOb0ojcyRU'; // Back pain causes in youth
    } else if (content.includes('elderly knee mistakes') || content.includes('рдмреБрдЬреБрд░реНрдЧреЛрдВ рдХреА рдШреБрдЯрдиреЗ рдХреА рдЧрд▓рддрд┐рдпрд╛рдВ') || query.includes('knee care 65+') || query.includes('senior knee')) {
      videoUrl = 'https://www.youtube.com/watch?v=vdBH_9_gmMs'; // Knee mistakes after 65
    } else if (content.includes('knee grease') || content.includes('рдШреБрдЯрдиреЗ рдХрд╛ рдЧреНрд░реАрд╕') || query.includes('knee stiffness') || query.includes('mobilization')) {
      videoUrl = 'https://www.youtube.com/watch?v=NlJnMeoZ3zw'; // Knee grease gone exercise
    } else if (content.includes('back pain cure') || content.includes('рдХрдорд░ рджрд░реНрдж рдХрд╛ рдЗрд▓рд╛рдЬ') || query.includes('core strengthening') || query.includes('permanent cure')) {
      videoUrl = 'https://www.youtube.com/watch?v=JvmVk8HTPq8'; // Back pain cure vs relief
    } else if (content.includes('physiotherapy fracture') || content.includes('рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкреА рдлреНрд░реИрдХреНрдЪрд░') || query.includes('why physiotherapy') || query.includes('rehabilitation')) {
      videoUrl = 'https://www.youtube.com/watch?v=fJgh0TL8t_U'; // Physiotherapy after fracture
    } else if (content.includes('knee x-ray') || content.includes('рдШреБрдЯрдиреЗ рдХрд╛ рдПрдХреНрд╕рд░реЗ') || query.includes('arthritis x-ray') || query.includes('joint wear')) {
      videoUrl = 'https://www.youtube.com/watch?v=6F8jr6XUTlM'; // Knee X-ray with arthritis
    } else if (content.includes('height operation') || content.includes('рд▓рдВрдмрд╛рдИ рдХрд╛ рдСрдкрд░реЗрд╢рди') || query.includes('limb lengthening') || query.includes('ilizarov surgery')) {
      videoUrl = 'https://www.youtube.com/watch?v=ALjUjxUfsJc'; // Height increase by operation
    } else if (content.includes('wrong posture') || content.includes('рдЧрд▓рдд рдкреЛрд╢реНрдЪрд░') || query.includes('sitting posture') || query.includes('lifting posture')) {
      videoUrl = 'https://www.youtube.com/watch?v=szGp0yMqEpM'; // Wrong sitting and lifting postures
    } else if (content.includes('fracture carelessness') || content.includes('рдлреНрд░реИрдХреНрдЪрд░ рдХреА рд▓рд╛рдкрд░рд╡рд╛рд╣реА') || query.includes('recovery mistakes') || query.includes('healing mistakes')) {
      videoUrl = 'https://www.youtube.com/watch?v=rj5ZbtS7g8w'; // Fracture recovery mistakes
    } else if (content.includes('neck femur') || content.includes('рдиреЗрдХ рдлреАрдорд░') || query.includes('femur neck fracture') || query.includes('valgus osteotomy')) {
      videoUrl = 'https://www.youtube.com/watch?v=D_s_3Lunufw'; // Neck femur fracture surgery
    } else if (content.includes('supplements') || content.includes('рд╕рдкреНрд▓реАрдореЗрдВрдЯ') || query.includes('calcium vitamin d') || query.includes('omega 3')) {
      videoUrl = 'https://www.youtube.com/watch?v=hGjVlviE81I'; // Supplements for pain and bones
    } else if (content.includes('mattress chair') || content.includes('рдореИрдЯреНрд░реЗрд╕ рдЪреЗрдпрд░') || query.includes('back pain furniture') || query.includes('ergonomics')) {
      videoUrl = 'https://www.youtube.com/watch?v=MQ6h6greAGs'; // Mattress and chair for back pain
    } else if (content.includes('10000 injection') || content.includes('10000 рдХрд╛ рдЗрдВрдЬреЗрдХреНрд╢рди') || query.includes('arthritis injection') || query.includes('expensive injection')) {
      videoUrl = 'https://www.youtube.com/watch?v=9dJYa6mGO9g'; // 10000 rupees injection truth
    } else if (content.includes('elderly fracture surgery') || content.includes('рдмреБрдЬреБрд░реНрдЧреЛрдВ рдХрд╛ рдлреНрд░реИрдХреНрдЪрд░ рдСрдкрд░реЗрд╢рди') || query.includes('old age bone surgery') || query.includes('geriatric surgery')) {
      videoUrl = 'https://www.youtube.com/watch?v=VMFwgmVrAWI'; // Elderly fracture surgery risks vs benefits
    } else if (content.includes('painkiller side effects') || content.includes('рджрд░реНрдж рдХреА рджрд╡рд╛ рдХреЗ рдиреБрдХрд╕рд╛рди') || query.includes('kidney damage') || query.includes('liver damage')) {
      videoUrl = 'https://www.youtube.com/watch?v=UmkedHZ-Wuw'; // Harmful effects of painkillers
    } else if (content.includes('walking cast') || content.includes('рд╡реЙрдХрд┐рдВрдЧ рдХрд╛рд╕реНрдЯ') || query.includes('PTB cast') || query.includes('foot fracture cast')) {
      videoUrl = 'https://www.youtube.com/watch?v=dlglJiAKxJ8'; // Walking cast for foot fracture
    } else if (content.includes('knee inactivity') || content.includes('рдШреБрдЯрдиреЗ рдХреА рдирд┐рд╖реНрдХреНрд░рд┐рдпрддрд╛') || query.includes('knee rest mistake') || query.includes('complete rest')) {
      videoUrl = 'https://www.youtube.com/watch?v=-FqPfuTUCdw'; // Knee pain inactivity mistake
    } else if (content.includes('pain swelling causes') || content.includes('рджрд░реНрдж рд╕реВрдЬрди рдХреЗ рдХрд╛рд░рдг') || query.includes('stop 4 things') || query.includes('knee swelling')) {
      videoUrl = 'https://www.youtube.com/watch?v=2Zk_6j_JwmI'; // Real reason behind pain and swelling
    } else if (content.includes('knee pain 4 reasons') || content.includes('рдШреБрдЯрдиреЗ рджрд░реНрдж рдХреЗ 4 рдХрд╛рд░рдг') || query.includes('major knee causes') || query.includes('ignored reasons')) {
      videoUrl = 'https://www.youtube.com/watch?v=2xEyTbnAkws'; // 4 major reasons for knee pain
    } else if (content.includes('bone fracture first aid') || content.includes('рд╣рдбреНрдбреА рдЯреВрдЯрдиреЗ рдкрд░ рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░') || query.includes('first aid fracture') || query.includes('do not harm')) {
      videoUrl = 'https://www.youtube.com/watch?v=-0BggP2XY5s'; // Bone fracture first aid tips
    } else if (content.includes('knee operation mistake') || content.includes('рдШреБрдЯрдиреЗ рдХреЗ рдСрдкрд░реЗрд╢рди рдХреА рдЧрд▓рддреА') || query.includes('post surgery weight') || query.includes('50% mistake')) {
      videoUrl = 'https://www.youtube.com/watch?v=tAxfZMpNkVs'; // 50% people mistake after knee operation
    } else if (content.includes('broken arm exercise') || content.includes('рдЯреВрдЯреЗ рд╣рд╛рде рдХреА рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ') || query.includes('arm stiffness') || query.includes('plaster removal arm')) {
      videoUrl = 'https://www.youtube.com/watch?v=6fJg4JM8sVY'; // Exercise after broken arm
    } else if (content.includes('pro inflammatory foods') || content.includes('рдкреНрд░реЛ рдЗрдВрдлреНрд▓реЗрдореЗрдЯрд░реА рдлреВрдб') || query.includes('inflammatory diet') || query.includes('foods increase pain')) {
      videoUrl = 'https://www.youtube.com/watch?v=riuSNV_NpeE'; // Pro-inflammatory foods dangers
    } else if (content.includes('knee surgery necessary') || content.includes('рдШреБрдЯрдиреЗ рдХрд╛ рдСрдкрд░реЗрд╢рди рдЬрд░реВрд░реА') || query.includes('when knee replacement') || query.includes('surgery last resort')) {
      videoUrl = 'https://www.youtube.com/watch?v=bTrjlTYu8uI'; // When is knee surgery necessary
    } else if (content.includes('knee operation food') || content.includes('рдШреБрдЯрдиреЗ рдХреЗ рдСрдкрд░реЗрд╢рди рдХреЗ рдмрд╛рдж рдЦрд╛рдирд╛') || query.includes('post surgery diet') || query.includes('recovery nutrition')) {
      videoUrl = 'https://www.youtube.com/watch?v=HkR-yWWDIK8'; // What to eat after knee operation
    } else if (content.includes('anti inflammatory foods') || content.includes('рдПрдВрдЯреА рдЗрдВрдлреНрд▓реЗрдореЗрдЯрд░реА рдлреВрдб') || query.includes('reduce inflammation') || query.includes('turmeric ginger')) {
      videoUrl = 'https://www.youtube.com/watch?v=0NreJ4l10XQ'; // Anti-inflammatory foods
    } else if (content.includes('radius ulna fracture') || content.includes('рд░реЗрдбрд┐рдпрд╕ рдЕрд▓рдирд╛ рдлреНрд░реИрдХреНрдЪрд░') || query.includes('square nail') || query.includes('forearm fracture')) {
      videoUrl = 'https://www.youtube.com/watch?v=K59weo_-_vg'; // Radius ulna fracture treatment
    } else if (content.includes('brinjal pumpkin') || content.includes('рдмреИрдВрдЧрди рдХреЛрд╣рдбрд╝рд╛') || query.includes('eggplant fracture') || query.includes('food myths')) {
      videoUrl = 'https://www.youtube.com/watch?v=BIlfUIs_OYE'; // Brinjal pumpkin truth for fractures
    } else if (content.includes('painkiller correct use') || content.includes('рджрд░реНрдж рдХреА рджрд╡рд╛ рд╕рд╣реА рдЙрдкрдпреЛрдЧ') || query.includes('painkiller precautions') || query.includes('medication safety')) {
      videoUrl = 'https://www.youtube.com/watch?v=1yzp4GMtHQ4'; // Correct use of painkillers
    } else if (content.includes('surgical rod removal') || content.includes('рд╕рд░реНрдЬрд┐рдХрд▓ рд░реЛрдб рдирд┐рдХрд╛рд▓рдирд╛') || query.includes('implant removal') || query.includes('visible rod')) {
      videoUrl = 'https://www.youtube.com/watch?v=hwAMElK_hYg'; // Visible surgical rods removal
    } else if (content.includes('knee exercise duration') || content.includes('рдШреБрдЯрдиреЗ рдХреА рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ рдХрд┐рддрдиреЗ рджрд┐рди') || query.includes('how long exercise') || query.includes('knee supplements')) {
      videoUrl = 'https://www.youtube.com/watch?v=hZGFbQYxj4U'; // Knee exercise duration and supplements
    } else if (content.includes('knee not bending') || content.includes('рдШреБрдЯрдирд╛ рдирд╣реАрдВ рдореБрдбрд╝ рд░рд╣рд╛') || query.includes('knee stiffness') || query.includes('CPM machine')) {
      videoUrl = 'https://www.youtube.com/watch?v=804YW_d-O4I'; // Knee not bending after surgery
    } else if (content.includes('partial knee replacement') || content.includes('рдкрд╛рд░реНрд╢рд┐рдпрд▓ рдиреА рд░рд┐рдкреНрд▓реЗрд╕рдореЗрдВрдЯ') || query.includes('leg not lifting') || query.includes('knee surgery recovery')) {
      videoUrl = 'https://www.youtube.com/watch?v=GbIp56va6ho'; // Partial knee replacement recovery
    } else if (content.includes('arthritis symptoms') || content.includes('рдЧрдард┐рдпрд╛ рдХреЗ рд▓рдХреНрд╖рдг') || query.includes('joint wear') || query.includes('movement issues')) {
      videoUrl = 'https://www.youtube.com/watch?v=ZeHg7GQ1Scw'; // Arthritis symptoms identification
    } else if (content.includes('arthritis diet mistakes') || content.includes('рдЧрдард┐рдпрд╛ рдореЗрдВ рдЦрд╛рдиреЗ рдХреА рдЧрд▓рддреА') || query.includes('joint pain food') || query.includes('dietary precautions')) {
      videoUrl = 'https://www.youtube.com/watch?v=eVHrEZA7qxc'; // Arthritis diet mistakes
    
    // Query-based intent matching for better URL selection
    } else if (query.includes('pain') || query.includes('рджрд░реНрдж') || query.includes('relief')) {
      videoUrl = 'https://www.youtube.com/watch?v=MIElsmWZKHc'; // Pain Management Module
    } else if (query.includes('exercise') || query.includes('рд╡реНрдпрд╛рдпрд╛рдо') || query.includes('workout')) {
      videoUrl = 'https://www.youtube.com/watch?v=9mS9jm54dlE'; // Early Stage Exercise
    } else if (query.includes('diet') || query.includes('food') || query.includes('рдЖрд╣рд╛рд░') || query.includes('nutrition')) {
      videoUrl = 'https://www.youtube.com/watch?v=8LsPh3TEbdk'; // Diet and foods for knee health
    } else if (query.includes('medicine') || query.includes('рджрд╡рд╛') || query.includes('painkiller')) {
      videoUrl = 'https://www.youtube.com/watch?v=oO859kzPkao'; // Medicine knowledge for pain
    } else if (query.includes('home') || query.includes('рдШрд░реЗрд▓реВ') || query.includes('remedy')) {
      videoUrl = 'https://www.youtube.com/watch?v=4L7aNdpuw3w'; // Home remedies for knee pain
    } else if (query.includes('causes') || query.includes('рдХрд╛рд░рдг') || query.includes('why')) {
      videoUrl = 'https://www.youtube.com/watch?v=MXmS5ED87T0'; // Main Causes Of Knee Pain
    } else if (query.includes('symptoms') || query.includes('рд▓рдХреНрд╖рдг')) {
      videoUrl = 'https://www.youtube.com/watch?v=bAzw-3FX3z0'; // Symptoms Of Cartilage Damage
    } else if (query.includes('treatment') || query.includes('рдЗрд▓рд╛рдЬ')) {
      videoUrl = 'https://www.youtube.com/watch?v=78IMjmNQQY0'; // Treatment options
    } else if (query.includes('diagnosis') || query.includes('рдЬрд╛рдВрдЪ')) {
      videoUrl = 'https://www.youtube.com/watch?v=2cETcxcr4q4'; // How to confirm diagnosis
    } else if (query.includes('webinar') || query.includes('рд╕реЗрдорд┐рдирд╛рд░')) {
      videoUrl = 'https://www.youtube.com/watch?v=DmZbT7uO8TU'; // Save the Knee Mission
    } else if (query.includes('masterclass') || query.includes('рдорд╛рд╕реНрдЯрд░рдХреНрд▓рд╛рд╕')) {
      videoUrl = 'https://www.youtube.com/watch?v=gxEHLIe1HPc'; // Live Masterclass
    } else {
      // Default fallback to Dr. Rameshwar's YouTube playlists
      videoUrl = 'https://www.youtube.com/@DrRameshwarkumar/playlists'; // Dr. Rameshwar YouTube playlists
    }
  }
  
  
  // Add video URL to the AI response if found
  if (videoUrl) {
    console.log('ЁЯФЧ Adding video URL to response:', videoUrl);
    finalResponse += `\n\nЁЯОе ${isEnglishQuery ? 'You can watch this helpful video:' : 'рдЗрд╕ рд╡реАрдбрд┐рдпреЛ рдХреЛ рджреЗрдЦреЗрдВ рдЬреЛ рдЖрдкрдХреА рдорджрдж рдХрд░реЗрдЧрд╛:'}\nЁЯФЧ ${videoUrl}`;
  } else {
    console.log('тЭМ No video URL found for query:', userQuery);
  }
  
  // Add helpful next steps based on query context
  if (finalResponse.length < 500) { // Only add if response is short
    if (isEnglishQuery) {
      finalResponse += `\n\nЁЯТк What to do next:\nтАв Feel free to ask me any other questions\nтАв Start with small, consistent daily practices\nтАв Be patient - natural healing takes time\nтАв Consult your doctor for any concerns`;
      
      finalResponse += `\n\nЁЯМЯ Remember: You're not alone in this journey! I'm here to help you every step of the way. Take it one day at a time and keep your knees healthy.`;
    } else {
      finalResponse += `\n\nЁЯТк рдЖрдЧреЗ рдХреНрдпрд╛ рдХрд░реЗрдВ:\nтАв рдЕрдЧрд░ рдЖрдкрдХреЛ рдФрд░ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП рддреЛ рдореБрдЭрд╕реЗ рдкреВрдЫреЗрдВ\nтАв рд░реЛрдЬрд╛рдирд╛ рдереЛрдбрд╝рд╛-рдереЛрдбрд╝рд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ\nтАв рдзреИрд░реНрдп рд░рдЦреЗрдВ - рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЙрдкрдЪрд╛рд░ рдореЗрдВ рд╕рдордп рд▓рдЧрддрд╛ рд╣реИ\nтАв рдХрд┐рд╕реА рднреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рд▓рд┐рдП рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ`;
      
      finalResponse += `\n\nЁЯМЯ рдпрд╛рдж рд░рдЦреЗрдВ: рдЖрдк рдЕрдХреЗрд▓реЗ рдирд╣реАрдВ рд╣реИрдВ! рдореИрдВ рдпрд╣рд╛рдБ рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рд╣реВрдБред рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдХрджрдо рдЙрдард╛рдПрдВ рдФрд░ рдЕрдкрдиреЗ рдШреБрдЯрдиреЛрдВ рдХреЛ рд╕реНрд╡рд╕реНрде рд░рдЦреЗрдВред`;
    }
  }
  
  console.log('ЁЯУЭ Final response length:', finalResponse.length);
  console.log('ЁЯУЭ Response includes video URL:', finalResponse.includes('ЁЯОе'));
  
  return finalResponse;
}

// This function is no longer needed as we use actual AI responses

// Groq API key
const GROQ_API_KEY = process.env.GROQ_API_KEY;

// Initialize Groq SDK
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

// Initialize Supabase client
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);

// Initialize Cohere client
const cohere = new CohereClient({ token: process.env.COHERE_API_KEY });

// MongoDB Atlas connection
const MONGODB_URI = process.env.MONGODB_URI;
const AZURE_SPEECH_KEY = process.env.AZURE_SPEECH_KEY;
const AZURE_SPEECH_REGION = process.env.AZURE_SPEECH_REGION;

mongoose.connect(MONGODB_URI)
  .then(() => console.log('Connected to MongoDB Atlas'))
  .catch(err => console.error('MongoDB connection error:', err));

// Import SharedChat model
const SharedChat = require('./models/SharedChat');

// Import Conversational Agent
const ConversationalAgent = require('./conversationalAgent');
const conversationalAgent = new ConversationalAgent();

// Import Voice Session Service
const VoiceSessionService = require('./services/voiceSessionService');
const voiceSessionService = new VoiceSessionService();

// Import Health Response Formatter
const HealthResponseFormatter = require('./healthResponseFormatter');
const healthFormatter = new HealthResponseFormatter();

// Import Chat History Service
const ChatHistoryService = require('./services/chatHistoryService');
const chatHistoryService = new ChatHistoryService();

// Import User model
const Users = require('./models/UserSchema');

// Load knowledge base
const kb = JSON.parse(fs.readFileSync('./rehab_knowledge_base.json', 'utf-8'));
const drRameshwarKB = JSON.parse(fs.readFileSync('./Dr_kbs/drRameshwar_kb.json', 'utf-8'));

// Recursively flatten your knowledge base to a searchable array
function flattenKB(obj) {
  let results = [];

  if (Array.isArray(obj)) {
    obj.forEach(item => {
      results = results.concat(flattenKB(item));
    });
  } else if (typeof obj === 'object' && obj !== null) {
    for (const key in obj) {
      results = results.concat(flattenKB(obj[key]));
    }
  } else if (typeof obj === 'string' || typeof obj === 'number') {
    results.push(String(obj));
  }

  return results;
}

// Search Dr. Rameshwar KB first for any Dr. Rameshwar related queries
function searchDrRameshwarKB(query) {
  const lowerQuery = query.toLowerCase();
  
  // Check if query is about Dr. Rameshwar
  if (lowerQuery.includes('rameshwar') || lowerQuery.includes('dr rameshwar') || 
      lowerQuery.includes('doctor rameshwar') || lowerQuery.includes('rameshwar kumar')) {
    
    const drKB = drRameshwarKB.knowledgeBase.DrRameshwar;
    
    // Contact related queries
    if (lowerQuery.includes('contact') || lowerQuery.includes('phone') || 
        lowerQuery.includes('number') || lowerQuery.includes('email') || 
        lowerQuery.includes('address') || lowerQuery.includes('clinic')) {
      return {
        title: drKB.contact.title,
        content: drKB.contact.content,
        summary: drKB.contact.summary,
        url: 'https://www.youtube.com/@DrRameshwarkumar/playlists' // Dr. Rameshwar YouTube playlists
      };
    }
    
    // Website related queries
    if (lowerQuery.includes('website') || lowerQuery.includes('site') || 
        lowerQuery.includes('youtube') || lowerQuery.includes('online')) {
      return {
        title: drKB.contact.title,
        content: 'Website: https://drrameshwarkumar.in/, Contact Page: https://drrameshwarkumar.in/contact/, YouTube: https://www.youtube.com/@DrRameshwarkumar',
        summary: 'Dr. Rameshwar Kumar official website, contact page and YouTube channel',
        url: 'https://www.youtube.com/@DrRameshwarkumar/playlists' // Dr. Rameshwar YouTube playlists
      };
    }
    
    // Hospital related queries
    if (lowerQuery.includes('hospital') || lowerQuery.includes('clinic') || 
        lowerQuery.includes('location') || lowerQuery.includes('where')) {
      return {
        title: drKB.hospital.title,
        content: drKB.hospital.content,
        summary: drKB.hospital.summary,
        url: 'kY1vwF5lpFI' // Dr. Rameshwar Morning Session video
      };
    }
    
    // General profile queries
    if (lowerQuery.includes('who is') || lowerQuery.includes('about') || 
        lowerQuery.includes('profile') || lowerQuery.includes('kaun hai')) {
      return {
        title: drKB.profile.title,
        content: drKB.profile.content + ' ' + drKB.achievements.content + ' ' + drKB.mission.content,
        summary: drKB.profile.summary,
        url: 'kY1vwF5lpFI' // Dr. Rameshwar Morning Session video
      };
    }
    
    // Default Dr. Rameshwar response
    return {
      title: drKB.profile.title,
      content: drKB.profile.content,
      summary: drKB.profile.summary,
      url: 'kY1vwF5lpFI' // Dr. Rameshwar Morning Session video
    };
  }
  
  return null;
}

// Basic keyword search in KB
function searchKB(query) {
  // First check Dr. Rameshwar KB
  const drResult = searchDrRameshwarKB(query);
  if (drResult) {
    return drResult;
  }
  
  // Then search general KB
  const flatKB = flattenKB(kb);
  const matched = flatKB.filter(item =>
    item.toLowerCase().includes(query.toLowerCase())
  );

  return matched.join('\n');
}

// Function to clean and format AI response
function formatResponse(text) {
  let formatted = text;
  
  // Remove markdown headers and replace with HTML strong tags
  formatted = formatted.replace(/#{1,6}\s*(.*?)(?=\n|$)/g, '<strong>$1</strong>');
  
  // Remove bold markdown and replace with HTML strong tags
  formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  
  // Remove italic markdown
  formatted = formatted.replace(/\*(.*?)\*/g, '$1');
  
  // Remove horizontal rules
  formatted = formatted.replace(/---+/g, '');
  formatted = formatted.replace(/___+/g, '');
  
  // Clean up bullet points - convert markdown to HTML lists
  formatted = formatted.replace(/^\s*[-*+]\s+(.+)$/gm, '<li>$1</li>');
  
  // Wrap consecutive <li> tags in <ul> tags
  formatted = formatted.replace(/(<li>.*?<\/li>)(\s*<li>.*?<\/li>)*/gs, (match) => {
    return '<ul>' + match + '</ul>';
  });
  
  // Convert line breaks to paragraph tags
  formatted = formatted.replace(/\n\n+/g, '</p><p>');
  
  // Wrap content that's not already in HTML tags with paragraph tags
  if (!formatted.startsWith('<')) {
    formatted = '<p>' + formatted;
  }
  if (!formatted.endsWith('>')) {
    formatted = formatted + '</p>';
  }
  
  // Clean up extra whitespace and line breaks
  formatted = formatted.replace(/\n+/g, ' ');
  formatted = formatted.replace(/\s+/g, ' ');
  
  // Fix paragraph structure
  formatted = formatted.replace(/<\/p>\s*<p>/g, '</p><p>');
  
  return formatted.trim();
}

// Enhanced POST endpoint with conversational AI agent
app.post('/askAI', async (req, res) => {
  const { query: userQuestion, userId = 'anonymous', useConversationalAgent = true, source = 'text', sessionId = null } = req.body;
  
  console.log('ЁЯУе Received request:', { userQuestion, userId, source, useConversationalAgent, sessionId });

  // Check for casual greetings first (before any complex processing)
  const casualGreetings = ['hi', 'hello', 'hey', 'hii', 'helo', 'namaste', 'рдирдорд╕реНрддреЗ', 'hola', 'good morning', 'good evening', 'good afternoon'];
  const userMsg = userQuestion.toLowerCase().trim();
  console.log(`ЁЯФН OLD ENDPOINT - Checking greeting for: "${userMsg}"`);
  
  const isGreeting = casualGreetings.some(greeting => {
    const match = userMsg === greeting || 
           userMsg.startsWith(greeting + ' ') ||
           userMsg.endsWith(' ' + greeting) ||
           userMsg === greeting + '!' ||
           userMsg === greeting + '.';
    if (match) console.log(`тЬЕ OLD ENDPOINT - Matched greeting: "${greeting}"`);
    return match;
  });
  
  console.log(`ЁЯОп OLD ENDPOINT - Is greeting detected: ${isGreeting}`);
  
  if (isGreeting) {
    console.log('ЁЯСЛ OLD ENDPOINT - Detected greeting, responding with simple welcome message');
    
    const greetingResponse = "Hi! ЁЯСЛ I'm OrthoBot AI, your friendly assistant for orthopedic recovery and physiotherapy guidance. I'm here to help you with exercises, pain management, rehabilitation tips, and recovery advice. What would you like to know about your recovery journey? ЁЯШК";
    
    return res.json({ 
      response: greetingResponse,
      answer: greetingResponse,
      source: 'greeting'
    });
  }

  // Use voice session service for voice calls with session memory
  if (source === 'voice') {
    try {
      console.log('ЁЯОд Processing voice message with session memory...');
      // Ensure we have a session from the very first user message
      let ensuredSessionId = sessionId;
      if (!ensuredSessionId && userId) {
        const activeSession = await voiceSessionService.ensureActiveSession(userId, 'voice_call');
        ensuredSessionId = activeSession.sessionId;
        console.log('тЬЕ Using active voice session for first message:', ensuredSessionId);
      }

      if (!ensuredSessionId) {
        return res.status(400).json({ error: 'sessionId or userId is required for voice messages' });
      }

      const result = await voiceSessionService.handleVoiceMessage(ensuredSessionId, userQuestion, GROQ_API_KEY);
      console.log('тЬЕ Voice session response:', result);
      
      return res.json({ 
        response: result.response,
        answer: result.response,
        detectedLanguage: result.detectedLanguage,
        detectedEmotion: result.detectedEmotion,
        sessionContext: result.sessionContext,
        isVoiceSession: true,
        sessionActive: result.isActive,
        sessionId: ensuredSessionId
      });
    } catch (error) {
      console.error('тЭМ Voice session error:', error);
      // Fall back to regular conversational agent
    }
  }

  // Use conversational agent if enabled
  if (useConversationalAgent) {
    try {
      console.log('ЁЯдЦ Processing with conversational agent...');
      const result = await conversationalAgent.processMessage(userId, userQuestion, GROQ_API_KEY);
      console.log('тЬЕ Conversational agent response:', result);
      
      return res.json({ 
        response: result.response,  // Changed from 'answer' to 'response'
        answer: result.response,    // Keep both for compatibility
        detectedLanguage: result.detectedLanguage,
        detectedEmotion: result.detectedEmotion,
        conversationId: result.conversationId,
        isConversational: true
      });
    } catch (error) {
      console.error('тЭМ Conversational agent error:', error);
      // Fall back to original system if conversational agent fails
    }
  }

  const matchedKB = searchKB(userQuestion);

  // Safety check for harmful queries about increasing pain
  const harmfulPainQueries = [
    'increase knee pain', 'рдмрдврд╝рд╛рдирд╛ рдШреБрдЯрдиреЗ рдХрд╛ рджрд░реНрдж', 'badhana ghutne ka dard',
    'make knee hurt more', 'рдШреБрдЯрдиреЗ рдореЗрдВ рдЬреНрдпрд╛рджрд╛ рджрд░реНрдж рдХрд░рдирд╛', 'ghutne mein zyada dard karna',
    'increase pain', 'рджрд░реНрдж рдмрдврд╝рд╛рдирд╛', 'dard badhana',
    'hurt more', 'рдФрд░ рджрд░реНрдж рдХрд░рдирд╛', 'aur dard karna',
    'make it worse', 'рдФрд░ рдЦрд░рд╛рдм рдХрд░рдирд╛', 'aur kharab karna',
    'increase swelling', 'рд╕реВрдЬрди рдмрдврд╝рд╛рдирд╛', 'sujan badhana',
    'increase inflammation', 'рд╕реВрдЬрди рдмрдврд╝рд╛рдирд╛', 'sujan badhana'
  ];

  const isHarmfulQuery = harmfulPainQueries.some(pattern =>
    userQuestion.toLowerCase().includes(pattern.toLowerCase())
  );

  if (isHarmfulQuery) {
    const isHindi = /[\u0900-\u097F]/.test(userQuestion);

    if (isHindi) {
      return res.json({
        response: "рдореИрдВ рдЖрдкрдХреЛ рдРрд╕рд╛ рдХрд░рдиреЗ рдХреА рд╕рд▓рд╛рд╣ рдирд╣реАрдВ рджреЗ рд╕рдХрддреА! рдШреБрдЯрдиреЗ рдореЗрдВ рджрд░реНрдж рдХреЛ рдмрдврд╝рд╛рдирд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рд▓рд┐рдП рд╣рд╛рдирд┐рдХрд╛рд░рдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдкрдХреЛ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рдХреЗ рдХрд╛рд░рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рд╣реИ? рдпрд╛ рдлрд┐рд░ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рдХреЛ рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рд╕рд▓рд╛рд╣ рдЪрд╛рд╣рд┐рдП?",
        answer: "рдореИрдВ рдЖрдкрдХреЛ рдРрд╕рд╛ рдХрд░рдиреЗ рдХреА рд╕рд▓рд╛рд╣ рдирд╣реАрдВ рджреЗ рд╕рдХрддреА! рдШреБрдЯрдиреЗ рдореЗрдВ рджрд░реНрдж рдХреЛ рдмрдврд╝рд╛рдирд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рд▓рд┐рдП рд╣рд╛рдирд┐рдХрд╛рд░рдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдкрдХреЛ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рдХреЗ рдХрд╛рд░рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рд╣реИ? рдпрд╛ рдлрд┐рд░ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рдХреЛ рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рд╕рд▓рд╛рд╣ рдЪрд╛рд╣рд┐рдП?",
        source: 'safety_check'
      });
    } else {
      return res.json({
        response: "I cannot advise you to do that! Increasing knee pain can be harmful to your health. Do you want to know about the causes of knee pain? Or do you need some advice to reduce knee pain?",
        answer: "I cannot advise you to do that! Increasing knee pain can be harmful to your health. Do you want to know about the causes of knee pain? Or do you need some advice to reduce knee pain?",
        source: 'safety_check'
      });
    }
  }

  // -------------------- SYSTEM PROMPT (HTML-friendly, no markdown) --------------------
  const systemPrompt = `You are OrthoBot AI, a caring, friendly, and professional virtual assistant that supports post-operative orthopedic patients during recovery. You are a female assistant and must use feminine forms in Hindi responses.

ЁЯОп **RESPONSE STYLE**: Write like ChatGPT - natural, conversational, emotionally empathetic, and engaging. Show genuine care and understanding. Use emojis ONLY when they are relevant and add value to the response - not in every sentence.

ЁЯТЭ **EMOTIONAL EMPATHY**: Always acknowledge the patient's feelings and concerns with warmth. Use phrases like "I understand this must be concerning for you", "It's completely normal to feel worried about this", "You're doing great by asking these questions".

ЁЯЧгя╕П **Response Style Rules:**
1. Always sound **natural, caring, and positive** тАФ like a human physiotherapist.
2. Mix **short Hindi and simple English** naturally (Hinglish tone is fine).
3. Never sound robotic or scripted. Avoid repeating template-like phrases.
4. Keep the tone encouraging тАФ even if user says something unusual or funny.
ЁЯТм **Special Handling Instructions:**
1. If user says **they are in pain**:
- Respond empathetically first.
- Ask when the pain started, how severe it is, and offer helpful next steps.
Example:
> тАЬрдореИрдВ рд╕рдордЭ рд╕рдХрддреА рд╣реВрдБ рдХрд┐ рджрд░реНрдж рддрдХрд▓реАрдлрд╝рджреЗрд╣ рд╣реЛрддрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдк рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдпреЗ рджрд░реНрдж рдХрдм рд╕реЗ рд╣реИ рдФрд░ рдХрд╣рд╛рдБ рдЬрд╝реНрдпрд╛рджрд╛ рдорд╣рд╕реВрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ?тАЭ
2. If user says **they are NOT in pain** (e.g., тАЬрдШреБрдЯрдиреЗ рдореЗрдВ рджрд░реНрдж рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛тАЭ):
- Respond positively and encourage them to maintain recovery.
Example:
> тАЬрдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЗрд╕рдХрд╛ рдорддрд▓рдм рдЖрдкрдХреА рд░рд┐рдХрд╡рд░реА рд╕рд╣реА рджрд┐рд╢рд╛ рдореЗрдВ рдЬрд╛ рд░рд╣реА рд╣реИ рдмрд╕ рдзреНрдпрд╛рди рд░рдЦрд┐рдП рдХрд┐ рдирд┐рдпрдорд┐рдд рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬрд╝ рдФрд░ рд╕реНрдЯреНрд░реЗрдЪ рдХрд░рддреЗ рд░рд╣реЗрдВредтАЭ
 3. If user says something **confusing, irrelevant, or non-medical**:
- Gently redirect them back to a health-related topic.
Example:
> тАЬрдЕрдЪреНрдЫрд╛ ЁЯЩВ рдХреНрдпрд╛ рдЖрдк рдЕрдкрдиреЗ рдШреБрдЯрдиреЗ рдпрд╛ рдХрд┐рд╕реА рдФрд░ рд╣рдбреНрдбреА рдХреА рдкрд░реЗрд╢рд╛рдиреА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрд╛рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ?тАЭ
4. If user asks **personal or risky questions**:
- Politely decline and remind them to consult a real doctor for medical emergencies.
Example:
> тАЬрдореИрдВ рдХреЗрд╡рд▓ рд╕рд╛рдорд╛рдиреНрдп рд╕реБрдЭрд╛рд╡ рджреЗ рд╕рдХрддреА рд╣реВрдБред рдЧрдВрднреАрд░ рджрд░реНрдж рдпрд╛ рдЪреЛрдЯ рдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ рдЕрдкрдиреЗ рдбреЙрдХреНрдЯрд░ рд╕реЗ рддреБрд░рдВрдд рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВредтАЭ
 ЁЯзй **Personality & Behavior:**
- Talk like a friendly physiotherapist who genuinely cares.
- Stay calm, polite, and emotionally intelligent.
- DonтАЩt overuse emojis тАФ 1 or 2 max per reply.
- Always give short, easy-to-understand explanations.
ЁЯй║ **Knowledge Domain:**
You specialize in:
- Physiotherapy
- Knee and joint pain
- Post-operative recovery
- Muscle strengthening & stretching
- Exercise guidance & pain prevention
ЁЯТб **Example User Flows:**
**User:** тАЬрдореЗрд░реЗ рдШреБрдЯрдиреЗ рдореЗрдВ рджрд░реНрдж рдХреНрдпреЛрдВ рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛?тАЭ
**Bot:** тАЬрдореИрдВ рдЗрд╕рдореЗрдВ рдорджрдж рдирд╣реАрдВ рдХрд░ рд╕рдХрддреА рд╣реВрдБред
рдЕрдЧрд░ рдЖрдк тАЬрдШреБрдЯрдиреЗ рдореЗрдВ рджрд░реНрдж рдмрдврд╝рд╛рдиреЗтАЭ рдХрд╛ рдорддрд▓рдм рдЬрд╛рдирдмреВрдЭрдХрд░ рджрд░реНрдж рдмрдврд╝рд╛рдирд╛ рдпрд╛ рдиреБрдХрд╕рд╛рди рдкрд╣реБрдБрдЪрд╛рдирд╛ рд▓реЗрдирд╛ рдЪрд╛рд╣ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдпрд╣ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рд▓рд┐рдП рдЦрддрд░рдирд╛рдХ рд╣реИ тАФ рдРрд╕рд╛ рдХрд░рдирд╛ рдмрд┐рд▓реНрдХреБрд▓ рд╕реБрд░рдХреНрд╖рд┐рдд рдирд╣реАрдВ рд╣реИред рд▓реЗрдХрд┐рди рдЕрдЧрд░ рдЖрдк рдпрд╣ рд╕рдордЭрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ тАЬрдШреБрдЯрдиреЗ рдХрд╛ рджрд░реНрдж рдХрд┐рди рдХрд╛рд░рдгреЛрдВ рд╕реЗ рдмрдврд╝ рдЬрд╛рддрд╛ рд╣реИ?тАЭ рддреЛ рдореИрдВ рдкреВрд░реА рддрд░рд╣ рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдБ ЁЯСЗ
рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рдХреЗ рдмрдврд╝рдиреЗ рдХреЗ рд╕рд╛рдорд╛рдиреНрдп рдХрд╛рд░рдг:
рдЕрддреНрдпрдзрд┐рдХ рд╡рдЬрди рдбрд╛рд▓рдирд╛ рдЬрд╝реНрдпрд╛рджрд╛ рджреЗрд░ рдЦрдбрд╝реЗ рд░рд╣рдирд╛ рдпрд╛ рджреМрдбрд╝рдирд╛
рдЧрд▓рдд рдореБрджреНрд░рд╛ (Posture)рдмреИрдардиреЗ рдпрд╛ рдЙрдардиреЗ рдХрд╛ рддрд░реАрдХрд╛ рдЧрд▓рдд рд╣реЛрдирд╛
рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ рдХреА рдХрдордЬреЛрд░реА рдЬрд╛рдВрдШ рдХреА рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпрд╛рдБ рдХрдордЬреЛрд░ рд╣реЛрдиреЗ рд╕реЗ рдШреБрдЯрдиреЗ рдкрд░ рдЬрд╝реНрдпрд╛рджрд╛ рджрдмрд╛рд╡ рдЖрддрд╛ рд╣реИ рдЕрдЪрд╛рдирдХ рднрд╛рд░реА рд╡реНрдпрд╛рдпрд╛рдо рдпрд╛ рдЭрдЯрдХрд╛ рд▓рдЧрдирд╛
рд╕реВрдЬрди рдпрд╛ рдЧрдард┐рдпрд╛ (Arthritis) рдЬреИрд╕реА рд╕рдорд╕реНрдпрд╛
рдЕрд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рдпрд╛ рдкрд╛рдиреА рдХреА рдХрдореА тАУ рдЬреЛрдбрд╝реЛрдВ рдореЗрдВ рдЪрд┐рдХрдирд╛рдИ рдХрдо рд╣реЛ рдЬрд╛рддреА рд╣реИ рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдореИрдВ рдмрддрд╛ рд╕рдХрддрд╛ рд╣реВрдБ рдХрд┐ рдШреБрдЯрдиреЗ рдХрд╛ рджрд░реНрдж рдХрдо рдХрд░рдиреЗ рдпрд╛ рдареАрдХ рдХрд░рдиреЗ рдХреЗ рд╕реБрд░рдХреНрд╖рд┐рдд рддрд░реАрдХреЗ рдХреНрдпрд╛ рд╣реИрдВ тАФ рдЬреИрд╕реЗ рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкреА, рд╕реНрдЯреНрд░реЗрдЪрд┐рдВрдЧ рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬрд╝, рдФрд░ рдШрд░реЗрд▓реВ рдЙрдкрд╛рдпредтАЭ

**User:** тАЬрдШреБрдЯрдиреЗ рдореЗрдВ рдлрд┐рд░ рд╕реЗ рджрд░реНрдж рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛редтАЭ
**Bot:** тАЬрдореИрдВ рд╕рдордЭ рдЧрдИ, рдРрд╕рд╛ рдХрдИ рдмрд╛рд░ рд╣реЛрддрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдк рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рджрд░реНрдж рдХрд┐рд╕ рд╣рд┐рд╕реНрд╕реЗ рдореЗрдВ рдЬрд╝реНрдпрд╛рджрд╛ рд╣реИ рдФрд░ рдХрдм рд╕реЗ рд╣реИ?тАЭ
 тЪЩя╕П **Final Rule:**
Always think like a caring human expert тАФ not a machine.
Your job is to make the user feel heard, understood, and guided. 

You are a female assistant and must use feminine forms in Hindi responses:
- Use "рд╣реВрдБ" instead of "рд╣реИ" for "I am"
- Use "рд╕рдХрддреА рд╣реВрдБ" instead of "рд╕рдХрддрд╛ рд╣реВрдБ" for "I can"
- Use "рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдБ" instead of "рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ" for "I can help"
- Use "рдмрддрд╛рдКрдВрдЧреА" instead of "рдмрддрд╛рдКрдВрдЧрд╛" for "I will tell"
- Use "рд╕рдордЭ рдЧрдИ" instead of "рд╕рдордЭ рдЧрдпрд╛" for "I understood"
- Use "рдХрд░рддреА рд╣реВрдБ" instead of "рдХрд░рддрд╛ рд╣реВрдБ" for "I do"

Purpose & Knowledge Use:
- Use the structured JSON knowledge base as the primary source.
- If the user question matches KB content, answer from the KB.
- If only partial info is found, combine KB + your own trusted orthopedic recovery knowledge.
- If nothing relevant exists in the KB, provide safe, general orthopedic recovery guidance.
- Use natural language understanding (NLP) to interpret intent and keep language patient-friendly.
- If unsure or the topic clearly needs clinical evaluation, say:
  I recommend asking your doctor for accurate advice.
  If the user says only a casual greeting (like "hi", "hello", "hey"):
- Respond simply with a short friendly introduction:
  "Hi! ЁЯСЛ I'm OrthoBot AI, your assistant for post-operative orthopedic recovery. How can I help you today? ЁЯШК"
- Do not use headings for greetings.
  Otherwise, follow the full structured response format.

Off-Topic Handling:
If the question is outside orthopedic post-op care, rehabilitation, wound care, exercises, mobility, or pain management, politely redirect:
I'm OrthoBot AI, here to help with post-operative orthopedic recovery. Please ask about surgery, rehabilitation, or orthopedic care. ЁЯПе

ЁЯЪи CRITICAL: Dr. Rameshwar Kumar Contact Information (MANDATORY - USE ONLY THESE DETAILS):

WARNING: NEVER EVER provide fake, made-up, or assumed contact details for Dr. Rameshwar Kumar. You MUST use ONLY these verified details:

ЁЯУЮ CONTACT QUERIES - Use these EXACT details:
- Phone: +917992271883
- Email: care@drrameshwarkumar.in
- Clinic Address: C-1/101, Pankha Rd, Block C1, Janakpuri, Delhi, 110059

ЁЯМР WEBSITE QUERIES - Use this EXACT website:
- Website: https://drrameshwarkumar.in/
- YouTube: https://www.youtube.com/@DrRameshwarkumar

ЁЯПе HOSPITAL QUERIES - Use these EXACT details:
- Hospital Name: Shreesai Hospital & Trauma Center Private Limited
- Hospital Website: https://srisaihospitalsiwan.com/
- Hospital Address: Surgeon Lane, Bangaliu Pakri, Gaushala Road, Siwan, Bihar тАУ 841226

тЭМ FORBIDDEN: Do NOT mention any other hospitals like 'Delhi Orthopedic Hospital', 'Mumbai hospitals', or any other fake names.
тЭМ FORBIDDEN: Do NOT provide any other phone numbers, emails, websites, or addresses.
тЭМ FORBIDDEN: Do NOT make up or assume any information about Dr. Rameshwar Kumar.

IF YOU DON'T KNOW SOMETHING SPECIFIC: Simply say 'I don't have that specific information. Please contact Dr. Rameshwar Kumar directly at +917992271883 or visit https://drrameshwarkumar.in/'

How to Write the Answer (CRITICAL FORMATTING RULES):
- NEVER use markdown formatting (no ##, **, *, ---, ___, etc.)
- Output ONLY clean HTML tags
- Headings: Use <strong>Heading Text</strong> (add emojis only if relevant to the content)
- Lists: Use <ul><li>item</li></ul> format only
- Paragraphs: Use <p>text</p> tags
- Bold text: Use <strong>text</strong> (never **)
- Use emojis sparingly and only when they add meaningful context
- Keep tone warm, reassuring, conversational and easy to understand
- Keep responses medium length and well-structured

Safety & Red-Flag Logic:
- If the user mentions any of these, add an urgent line at the top:
  Sudden severe pain, high fever or chills, redness/pus/foul odor from wound, rapidly increasing swelling, chest pain/shortness of breath, inability to bear weight or move the joint.
- Urgent line to show:
  <p>This may be urgent. Please contact your doctor or seek medical care right away.</p>
- Do not diagnose or prescribe. Focus on safe guidance, gentle exercises, reassurance, and when to consult a doctor.

Response Structure (Empathetic ChatGPT style with minimal emojis):

Start with emotional acknowledgment and intent highlighting:
<p>I understand this must be [concerning/frustrating/worrying] for you. Let me help you with <strong>[User's main concern - e.g. "Back Pain After Surgery"]</strong></p>

<strong>What's Likely Happening:</strong>
<ul>
<li>тАв [Empathetic explanation 1]</li>
<li>тАв [Reassuring explanation 2]</li>
<li>тАв [Normal recovery aspect]</li>
</ul>

<strong>Here's What You Can Do:</strong>
<ul>
<li>тАв [Immediate comfort action]</li>
<li>тАв [Practical step]</li>
<li>тАв [Self-care tip]</li>
<li>тАв [Gentle exercise/movement]</li>
</ul>

<strong>Watch for These Signs:</strong>
<ul>
<li>тАв [Warning sign 1]</li>
<li>тАв [Warning sign 2]</li>
<li>тАв [When to call doctor]</li>
</ul>

<strong>Suggestions for You:</strong>
<ul>
<li>тАв [Proactive suggestion 1] - Would you like me to explain this in detail?</li>
<li>тАв [Proactive suggestion 2] - I can guide you through this if you're interested</li>
<li>тАв [Proactive suggestion 3] - Let me know if you'd like specific exercises for this</li>
</ul>

<p>You're doing great by taking care of yourself! Is there anything specific you'd like me to explain more about?</p>

At the end of every response, append this line exactly:
<p>тЪая╕П Disclaimer: This information is for general guidance only and should not replace medical advice. Please consult your doctor for personalized care.</p>

---
Relevant Knowledge Base:
\${matchedKB || "No direct match found in knowledge base."}
`;

  // -------------------- END SYSTEM PROMPT --------------------

  try {
    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama-3.3-70b-versatile',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userQuestion }
        ]
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const rawAnswer = response.data.choices[0].message.content;
    const formattedAnswer = formatResponse(rawAnswer);
    res.json({ answer: formattedAnswer });
  } catch (err) {
    console.error(err.response?.data || err);
    res.status(500).send('Something went wrong.');
  }
});

// Share chat endpoint - Create a shareable link
app.post('/api/share/chat', async (req, res) => {
  try {
    const { shareType, title, messages, singleMessage } = req.body;
    
    if (!shareType || !title) {
      return res.status(400).json({ error: 'Missing required fields: shareType and title' });
    }

    if (shareType === 'full_chat' && (!messages || !Array.isArray(messages))) {
      return res.status(400).json({ error: 'Messages array is required for full_chat sharing' });
    }

    if (shareType === 'single_message' && !singleMessage) {
      return res.status(400).json({ error: 'Single message is required for single_message sharing' });
    }

    const shareId = uuidv4();
    
    const sharedChat = new SharedChat({
      shareId,
      shareType,
      title,
      messages: shareType === 'full_chat' ? messages : undefined,
      singleMessage: shareType === 'single_message' ? singleMessage : undefined
    });

    await sharedChat.save();

    res.json({
      success: true,
      shareId,
      shareUrl: `${req.protocol}://${req.get('host')}/share/${shareId}`
    });

  } catch (error) {
    console.error('Error creating shared chat:', error);
    res.status(500).json({ error: 'Failed to create shared chat' });
  }
});

// Get shared chat endpoint
app.get('/api/share/:shareId', async (req, res) => {
  try {
    const { shareId } = req.params;
    
    const sharedChat = await SharedChat.findOne({ shareId });
    
    if (!sharedChat) {
      return res.status(404).json({ error: 'Shared chat not found or expired' });
    }

    // Increment view count
    sharedChat.viewCount += 1;
    await sharedChat.save();

    res.json({
      success: true,
      data: {
        shareId: sharedChat.shareId,
        shareType: sharedChat.shareType,
        title: sharedChat.title,
        messages: sharedChat.messages,
        singleMessage: sharedChat.singleMessage,
        createdAt: sharedChat.createdAt,
        viewCount: sharedChat.viewCount
      }
    });

  } catch (error) {
    console.error('Error fetching shared chat:', error);
    res.status(500).json({ error: 'Failed to fetch shared chat' });
  }
});

// Conversational Agent Endpoints

// Get conversation history
app.get('/api/conversation/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    const history = conversationalAgent.getConversationHistory(userId);
    res.json({ success: true, history });
  } catch (error) {
    console.error('Error fetching conversation history:', error);
    res.status(500).json({ error: 'Failed to fetch conversation history' });
  }
});

// Clear conversation history
app.delete('/api/conversation/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    conversationalAgent.clearConversationHistory(userId);
    res.json({ success: true, message: 'Conversation history cleared' });
  } catch (error) {
    console.error('Error clearing conversation history:', error);
    res.status(500).json({ error: 'Failed to clear conversation history' });
  }
});

// Get conversation statistics
app.get('/api/conversation/:userId/stats', (req, res) => {
  try {
    const { userId } = req.params;
    const stats = conversationalAgent.getConversationStats(userId);
    res.json({ success: true, stats });
  } catch (error) {
    console.error('Error fetching conversation stats:', error);
    res.status(500).json({ error: 'Failed to fetch conversation stats' });
  }
});

// Azure Speech: Exchange subscription key for short-lived token
app.get('/api/azure/tts/token', async (req, res) => {
  try {
    if (!AZURE_SPEECH_KEY || !AZURE_SPEECH_REGION) {
      return res.status(400).json({ error: 'Azure Speech env vars missing', haveKey: Boolean(AZURE_SPEECH_KEY), region: AZURE_SPEECH_REGION || null });
    }

    const tokenResp = await axios.post(
      `https://${AZURE_SPEECH_REGION}.api.cognitive.microsoft.com/sts/v1.0/issueToken`,
      null,
      {
        headers: {
          'Ocp-Apim-Subscription-Key': AZURE_SPEECH_KEY,
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );

    res.json({
      token: tokenResp.data,
      region: AZURE_SPEECH_REGION,
      expiresInSeconds: 540 // ~9 minutes typical
    });
  } catch (error) {
    const status = error.response?.status || 500;
    const data = error.response?.data || error.message;
    console.error('Error getting Azure Speech token:', { status, data, region: AZURE_SPEECH_REGION });
    res.status(status).json({ error: 'Failed to get Azure Speech token', details: data, region: AZURE_SPEECH_REGION });
  }
});

// Azure Speech: Full health check (token + tiny synthesis)
app.get('/api/azure/tts/health', async (req, res) => {
  try {
    if (!AZURE_SPEECH_KEY || !AZURE_SPEECH_REGION) {
      return res.status(400).json({ ok: false, error: 'Azure Speech env vars missing', haveKey: Boolean(AZURE_SPEECH_KEY), region: AZURE_SPEECH_REGION || null });
    }

    // 1) Get token
    const tokenResp = await axios.post(
      `https://${AZURE_SPEECH_REGION}.api.cognitive.microsoft.com/sts/v1.0/issueToken`,
      null,
      {
        headers: {
          'Ocp-Apim-Subscription-Key': AZURE_SPEECH_KEY,
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }
    );
    const token = tokenResp.data;

    // 2) Do a tiny synthesis request
    const ssml = `<?xml version="1.0" encoding="UTF-8"?>
<speak version="1.0" xml:lang="en-US" xmlns="http://www.w3.org/2001/10/synthesis" xmlns:mstts="http://www.w3.org/2001/mstts">
  <voice name="en-US-JennyNeural">
    <mstts:express-as style="chat">ok</mstts:express-as>
  </voice>
</speak>`;

    const synthResp = await axios.post(
      `https://${AZURE_SPEECH_REGION}.tts.speech.microsoft.com/cognitiveservices/v1`,
      ssml,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/ssml+xml',
          'X-Microsoft-OutputFormat': 'audio-16khz-32kbitrate-mono-mp3'
        },
        responseType: 'arraybuffer'
      }
    );

    return res.json({ ok: true, region: AZURE_SPEECH_REGION, tokenIssued: true, synthStatus: synthResp.status, contentType: synthResp.headers['content-type'] });
  } catch (error) {
    const status = error.response?.status || 500;
    const data = error.response?.data || error.message;
    console.error('Azure TTS health check failed:', { status, data, region: AZURE_SPEECH_REGION });
    return res.status(status).json({ ok: false, region: AZURE_SPEECH_REGION, details: data });
  }
});

// Azure Speech: List available voices for the configured region
app.get('/api/azure/tts/voices', async (req, res) => {
  try {
    if (!AZURE_SPEECH_KEY || !AZURE_SPEECH_REGION) {
      return res.status(400).json({ error: 'Azure Speech env vars missing', haveKey: Boolean(AZURE_SPEECH_KEY), region: AZURE_SPEECH_REGION || null });
    }

    const voicesResp = await axios.get(
      `https://${AZURE_SPEECH_REGION}.tts.speech.microsoft.com/cognitiveservices/voices/list`,
      {
        headers: {
          'Ocp-Apim-Subscription-Key': AZURE_SPEECH_KEY
        }
      }
    );

    res.json({ region: AZURE_SPEECH_REGION, count: voicesResp.data?.length || 0, voices: voicesResp.data });
  } catch (error) {
    const status = error.response?.status || 500;
    const data = error.response?.data || error.message;
    console.error('Error fetching Azure voices:', { status, data, region: AZURE_SPEECH_REGION });
    res.status(status).json({ error: 'Failed to fetch Azure voices', details: data, region: AZURE_SPEECH_REGION });
  }
});

// Groq TTS endpoint removed - using Azure TTS in frontend instead

// Get greeting in user's preferred language
app.post('/api/greeting', (req, res) => {
  try {
    const { language = 'english', userName = null } = req.body;
    const greeting = conversationalAgent.getGreeting(language, userName);
    res.json({ success: true, greeting });
  } catch (error) {
    console.error('Error generating greeting:', error);
    res.status(500).json({ error: 'Failed to generate greeting' });
  }
});

// Voice Session Management Endpoints

// Start voice session
app.post('/api/voice/session/start', async (req, res) => {
  try {
    const { userId, sessionType = 'voice_call' } = req.body;
    
    if (!userId) {
      return res.status(400).json({ error: 'userId is required' });
    }

    const sessionInfo = await voiceSessionService.startVoiceSession(userId, sessionType);
    
    res.json({
      success: true,
      ...sessionInfo
    });
  } catch (error) {
    console.error('Error starting voice session:', error);
    res.status(500).json({ error: 'Failed to start voice session' });
  }
});

// End voice session
app.post('/api/voice/session/end', async (req, res) => {
  try {
    const { sessionId } = req.body;
    
    if (!sessionId) {
      return res.status(400).json({ error: 'sessionId is required' });
    }

    const result = await voiceSessionService.endVoiceSession(sessionId);
    
    if (result) {
      res.json({
        success: true,
        ...result
      });
    } else {
      res.status(404).json({ error: 'Session not found' });
    }
  } catch (error) {
    console.error('Error ending voice session:', error);
    res.status(500).json({ error: 'Failed to end voice session' });
  }
});

// Get voice session info
app.get('/api/voice/session/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    const sessionInfo = await voiceSessionService.getSessionInfo(sessionId);
    
    if (sessionInfo) {
      res.json({
        success: true,
        session: sessionInfo
      });
    } else {
      res.status(404).json({ error: 'Session not found' });
    }
  } catch (error) {
    console.error('Error getting session info:', error);
    res.status(500).json({ error: 'Failed to get session info' });
  }
});

// Get user's voice session history
app.get('/api/voice/sessions/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { limit = 10 } = req.query;
    
    const sessions = await voiceSessionService.getUserSessions(userId, parseInt(limit));
    
    res.json({
      success: true,
      sessions
    });
  } catch (error) {
    console.error('Error getting user sessions:', error);
    res.status(500).json({ error: 'Failed to get user sessions' });
  }
});

// Get voice session history (for saving to chat history before deletion)
app.post('/api/voice/session/history', async (req, res) => {
  try {
    const { sessionId } = req.body;
    
    if (!sessionId) {
      return res.status(400).json({ error: 'sessionId is required' });
    }

    // Import VoiceSession model to get conversation history directly
    const VoiceSession = require('./models/VoiceSession');
    const session = await VoiceSession.findOne({ sessionId });
    
    if (session) {
      res.json({
        success: true,
        sessionId: session.sessionId,
        conversationHistory: session.conversationHistory || [],
        primaryTopics: session.sessionContext.primaryTopics || [],
        patientCondition: session.sessionContext.patientCondition,
        lastActiveAt: session.lastActiveAt,
        createdAt: session.createdAt
      });
    } else {
      res.status(404).json({ error: 'Session not found' });
    }
  } catch (error) {
    console.error('Error getting voice session history:', error);
    res.status(500).json({ error: 'Failed to get voice session history' });
  }
});

// Cleanup expired sessions (admin endpoint)
app.post('/api/voice/cleanup', async (req, res) => {
  try {
    const deletedCount = await voiceSessionService.cleanupExpiredSessions();
    
    res.json({
      success: true,
      deletedCount,
      message: `Cleaned up ${deletedCount} expired sessions`
    });
  } catch (error) {
    console.error('Error cleaning up sessions:', error);
    res.status(500).json({ error: 'Failed to cleanup sessions' });
  }
});

// Creating middleware to fetch user
const fetchUser = async (req, res, next) => {
    const token = req.header('auth-token');
    if (!token) {
        return res.status(401).json({ 
            success: false,
            message: 'Please authenticate using valid token',
            data: null,
            timestamp: new Date().toISOString()
        });
    }
    try {
        const data = jwt.verify(token, process.env.JWT_SECRET);
        
        // Fetch user details from database to get updated information
        const user = await Users.findById(data.user.id).select('-password');
        if (!user) {
            return res.status(401).json({ 
                success: false,
                message: 'User not found',
                data: null,
                timestamp: new Date().toISOString()
            });
        }
        
        // Add user info and timestamps to request
        req.user = {
            id: user._id,
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            createdAt: user.createdAt,
            lastLogin: user.lastLogin
        };
        req.requestTimestamp = new Date().toISOString();
        
        next();
    } catch (error) {
        return res.status(401).json({ 
            success: false,
            message: 'Please authenticate using valid token',
            data: null,
            timestamp: new Date().toISOString()
        });
    }
};

// Creating endpoint for registering the user
app.post('/signup', async (req, res) => {
    try {
        const { firstName, lastName, email, password } = req.body;

        // Validate required fields
        if (!firstName || !lastName || !email || !password) {
            return res.status(400).json({
                success: false,
                message: "All fields are required",
                data: null,
                timestamp: new Date().toISOString()
            });
        }

        // Check if user already exists (case-insensitive)
        const emailLowerCase = email.toLowerCase().trim();
        console.log('Checking for email:', emailLowerCase);
        
        let existingUser = await Users.findOne({ 
            email: emailLowerCase
        });
        
        console.log('Found existing user:', existingUser ? 'YES' : 'NO');
        if (existingUser) {
            console.log('Existing user details:', existingUser.email);
        }
        
        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: "User already exists",
                data: null,
                timestamp: new Date().toISOString()
            });
        }

        // Hash the password
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        // Create new user
        const user = new Users({
            firstName: firstName,
            lastName: lastName,
            email: emailLowerCase,
            password: hashedPassword
        });

        await user.save();

        // Create JWT token
        const tokenData = {
            user: {
                id: user.id
            }
        };
        const token = jwt.sign(tokenData, process.env.JWT_SECRET, { expiresIn: '24h' });

        res.status(201).json({
            success: true,
            message: 'User registered successfully',
            data: {
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
                token: token,
                createdAt: user.createdAt,
            },
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Signup error:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error during registration',
            data: null,
            timestamp: new Date().toISOString()
        });
    }
});

// Creating endpoint for logging the user
app.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        // Validate required fields
        if (!email || !password) {
            return res.status(400).json({
                success: false,
                message: 'Email and password are required',
                data: null,
                timestamp: new Date().toISOString()
            });
        }

        // Find user by email
        let user = await Users.findOne({ email: email });
        if (!user) {
            return res.status(404).json({
                success: false,
                message: 'User not found',
                data: null,
                timestamp: new Date().toISOString()
            });
        }

        // Compare password with hashed password
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({
                success: false,
                message: 'Invalid password',
                data: null,
                timestamp: new Date().toISOString()
            });
        }

        // Update lastLogin timestamp
        user.lastLogin = new Date();
        await user.save();

        // Create JWT token
        const tokenData = {
            user: {
                id: user.id
            }
        };
        const token = jwt.sign(tokenData, process.env.JWT_SECRET, { expiresIn: '24h' });

        res.status(200).json({
            success: true,
            message: 'User logged in successfully',
            data: {
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
                token: token,
                createdAt: user.createdAt,
                lastLogin: user.lastLogin
            },
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            success: false,
            message: 'Internal server error during login',
            data: null,
            timestamp: new Date().toISOString()
        });
    }
});

// Test endpoint to check existing users (for debugging)
app.get('/api/users/check', async (req, res) => {
    try {
        const users = await Users.find({}, 'firstName lastName email createdAt');
        res.json({
            success: true,
            count: users.length,
            users: users
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error fetching users',
            error: error.message
        });
    }
});

// Test endpoint to delete a user by email (for testing only)
app.delete('/api/users/delete/:email', async (req, res) => {
    try {
        const email = req.params.email.toLowerCase().trim();
        const deletedUser = await Users.findOneAndDelete({ 
            email: email
        });
        
        if (deletedUser) {
            res.json({
                success: true,
                message: 'User deleted successfully',
                deletedUser: {
                    firstName: deletedUser.firstName,
                    lastName: deletedUser.lastName,
                    email: deletedUser.email
                }
            });
        } else {
            res.status(404).json({
                success: false,
                message: 'User not found'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error deleting user',
            error: error.message
        });
    }
});

// ==================== CHAT HISTORY API ENDPOINTS ====================

// Create new chat session
app.post('/api/chat/new', async (req, res) => {
  try {
    const { userId, title, sessionType = 'text_chat' } = req.body;
    
    if (!userId) {
      return res.status(400).json({ error: 'userId is required' });
    }

    const newChat = await chatHistoryService.createNewChat(userId, title, sessionType);
    
    res.json({
      success: true,
      ...newChat
    });
  } catch (error) {
    console.error('Error creating new chat:', error);
    res.status(500).json({ error: 'Failed to create new chat' });
  }
});

// Get user's chat history list
app.get('/api/chat/history/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { limit = 20, skip = 0 } = req.query;
    
    const result = await chatHistoryService.getUserChatHistory(userId, parseInt(limit), parseInt(skip));
    
    res.json(result);
  } catch (error) {
    console.error('Error fetching chat history:', error);
    res.status(500).json({ error: 'Failed to fetch chat history' });
  }
});

// Get full chat conversation
app.get('/api/chat/:chatId', async (req, res) => {
  try {
    const { chatId } = req.params;
    const { userId } = req.query;
    
    const result = await chatHistoryService.getChatConversation(chatId, userId);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(404).json(result);
    }
  } catch (error) {
    console.error('Error fetching chat conversation:', error);
    res.status(500).json({ error: 'Failed to fetch chat conversation' });
  }
});

// Add message to chat
app.post('/api/chat/:chatId/message', async (req, res) => {
  try {
    const { chatId } = req.params;
    const { role, content, userId } = req.body;
    
    if (!role || !content) {
      return res.status(400).json({ error: 'role and content are required' });
    }

    const result = await chatHistoryService.addMessageToChat(chatId, role, content, userId);
    
    res.json(result);
  } catch (error) {
    console.error('Error adding message to chat:', error);
    res.status(500).json({ error: 'Failed to add message to chat' });
  }
});

// Update chat title
app.put('/api/chat/:chatId/title', async (req, res) => {
  try {
    const { chatId } = req.params;
    const { title, userId } = req.body;
    
    if (!title) {
      return res.status(400).json({ error: 'title is required' });
    }

    const result = await chatHistoryService.updateChatTitle(chatId, title, userId);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(404).json(result);
    }
  } catch (error) {
    console.error('Error updating chat title:', error);
    res.status(500).json({ error: 'Failed to update chat title' });
  }
});

// Delete chat
app.delete('/api/chat/:chatId', async (req, res) => {
  try {
    const { chatId } = req.params;
    const { userId } = req.query;
    
    const result = await chatHistoryService.deleteChat(chatId, userId);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(404).json(result);
    }
  } catch (error) {
    console.error('Error deleting chat:', error);
    res.status(500).json({ error: 'Failed to delete chat' });
  }
});

// Save voice conversation to chat history
app.post('/api/chat/voice/save', async (req, res) => {
  try {
    const { userId, conversationHistory, sessionMetadata } = req.body;
    
    if (!userId || !conversationHistory) {
      return res.status(400).json({ error: 'userId and conversationHistory are required' });
    }

    const result = await chatHistoryService.saveVoiceConversationToHistory(userId, conversationHistory, sessionMetadata);
    
    res.json(result);
  } catch (error) {
    console.error('Error saving voice conversation:', error);
    res.status(500).json({ error: 'Failed to save voice conversation' });
  }
});

// Get or create active chat for user
app.get('/api/chat/active/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const result = await chatHistoryService.getOrCreateActiveChat(userId);
    
    res.json({
      success: true,
      ...result
    });
  } catch (error) {
    console.error('Error getting active chat:', error);
    res.status(500).json({ error: 'Failed to get active chat' });
  }
});

// Get chat statistics for user
app.get('/api/chat/stats/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const result = await chatHistoryService.getChatStats(userId);
    
    res.json(result);
  } catch (error) {
    console.error('Error fetching chat stats:', error);
    res.status(500).json({ error: 'Failed to fetch chat stats' });
  }
});

// Enhanced askAI endpoint with chat history integration and Supabase vector search
app.post('/api/chat/message', async (req, res) => {
  const { query: userQuestion, userId, chatId, useConversationalAgent = true, source = 'text', sessionId = null } = req.body;
  
  console.log('ЁЯУе Received chat message:', { userQuestion, userId, chatId, source, useConversationalAgent, sessionId });

  try {
    console.log('ЁЯЪА Starting message processing...');
    // Check for casual greetings first (before any complex processing)
    const casualGreetings = ['hi', 'hello', 'hey', 'hii', 'helo', 'namaste', 'рдирдорд╕реНрддреЗ', 'hola', 'good morning', 'good evening', 'good afternoon'];
    const userMsg = userQuestion.toLowerCase().trim();
    console.log(`ЁЯФН Checking greeting for: "${userMsg}"`);
    
    const isGreeting = casualGreetings.some(greeting => {
      const match = userMsg === greeting || 
             userMsg.startsWith(greeting + ' ') ||
             userMsg.endsWith(' ' + greeting) ||
             userMsg === greeting + '!' ||
             userMsg === greeting + '.';
      if (match) console.log(`тЬЕ Matched greeting: "${greeting}"`);
      return match;
    });
    
    console.log(`ЁЯОп Is greeting detected: ${isGreeting}`);
    
    if (isGreeting) {
      console.log('ЁЯСЛ Detected greeting, responding with simple welcome message');
      
      const greetingResponse = "Hi! ЁЯСЛ I'm OrthoBot AI, your friendly assistant for orthopedic recovery and physiotherapy guidance. I'm here to help you with exercises, pain management, rehabilitation tips, and recovery advice. What would you like to know about your recovery journey? ЁЯШК";
      
      // Get or create active chat for greeting
      let activeChatId = chatId;
      if (!activeChatId && userId) {
        const newChat = await chatHistoryService.createNewChat(userId);
        activeChatId = newChat.chatId;
      }
      
      // Add user message and greeting response to chat history
      if (activeChatId && userId) {
        await chatHistoryService.addMessageToChat(activeChatId, 'user', userQuestion, userId);
        await chatHistoryService.addMessageToChat(activeChatId, 'assistant', greetingResponse, userId);
      }
      
      return res.json({ 
        response: greetingResponse,
        answer: greetingResponse,
        chatId: activeChatId,
        source: 'greeting'
      });
    }

    // Get or create active chat if no chatId provided
    let activeChatId = chatId;
    if (!activeChatId && userId) {
      const activeChat = await chatHistoryService.getOrCreateActiveChat(userId);
      activeChatId = activeChat.chatId;
    }

    // Add user message to chat history
    if (activeChatId && userId) {
      await chatHistoryService.addMessageToChat(activeChatId, 'user', userQuestion, userId);
    }

    // Use voice session service for voice calls with session memory
    if (source === 'voice') {
      try {
        console.log('ЁЯОд Processing voice message with session memory...');
        let ensuredSessionId = sessionId;
        if (!ensuredSessionId && userId) {
          const activeSession = await voiceSessionService.ensureActiveSession(userId, 'voice_call');
          ensuredSessionId = activeSession.sessionId;
          console.log('тЬЕ Using active voice session for first message:', ensuredSessionId);
        }

        if (!ensuredSessionId) {
          return res.status(400).json({ error: 'sessionId or userId is required for voice messages' });
        }

        const result = await voiceSessionService.handleVoiceMessage(ensuredSessionId, userQuestion, GROQ_API_KEY);
        console.log('тЬЕ Voice session response:', result);
        
        // Add bot response to chat history if we have chatId
        if (activeChatId && userId) {
          await chatHistoryService.addMessageToChat(activeChatId, 'assistant', result.response, userId);
        }
        
        return res.json({ 
          response: result.response,
          answer: result.response,
          detectedLanguage: result.detectedLanguage,
          detectedEmotion: result.detectedEmotion,
          sessionContext: result.sessionContext,
          isVoiceSession: true,
          sessionActive: result.isActive,
          sessionId: ensuredSessionId,
          chatId: activeChatId
        });
      } catch (error) {
        console.error('тЭМ Voice session error:', error);
        // Fall back to regular conversational agent
      }
    }

    // Use conversational agent first for natural conversation
    console.log(`ЁЯФД useConversationalAgent: ${useConversationalAgent}`);
    if (useConversationalAgent) {  // Enable conversational agent first
      try {
        console.log('ЁЯдЦ Processing with conversational agent...');
        const result = await conversationalAgent.processMessage(userId, userQuestion, GROQ_API_KEY, cohere, supabase);
        console.log('тЬЕ Conversational agent response:', result);
        
        // ЁЯОп Check if we should use structured health response format
        let finalResponse = result.response;
        let responseType = 'conversational';
        
        if (result.hasKBContent && result.kbMatches) {
          // Extract KB info from matches
          const kbInfo = healthFormatter.extractKBInfo(result.kbMatches);
          
          // Format response using health template
          const formattedResult = healthFormatter.formatHealthResponse(userQuestion, kbInfo, result.response);
          
          if (formattedResult.type === 'structured') {
            // Apply clean formatting prompt
            finalResponse = formatOrthoResponse(userQuestion, kbInfo, result.response);
            responseType = 'structured';
            console.log('ЁЯУЛ Using structured health response format');
            console.log('ЁЯОп Query:', userQuestion);
            console.log('ЁЯОп KB Title:', kbInfo.title);
            console.log('ЁЯОп Formatted Response Preview:', finalResponse.substring(0, 300) + '...');
          } else {
            console.log('тЭМ Not using structured format for query:', userQuestion);
            console.log('тЭМ Formatted result type:', formattedResult.type);
          }
        }
        
        // Add bot response to chat history
        if (activeChatId && userId) {
          await chatHistoryService.addMessageToChat(activeChatId, 'assistant', finalResponse, userId);
        }
        
        return res.json({ 
          response: finalResponse,
          answer: finalResponse,
          detectedLanguage: result.detectedLanguage,
          detectedEmotion: result.detectedEmotion,
          conversationId: result.conversationId,
          isConversational: true,
          responseType: responseType,
          hasKBContent: result.hasKBContent,
          chatId: activeChatId
        });
      } catch (error) {
        console.error('тЭМ Conversational agent error:', error.message);
        console.error('тЭМ Full error:', error);
        console.log('ЁЯФД Falling back to KB search due to conversational agent error');
        // Fall back to Supabase vector search system
      }
    }

    // NEW: Supabase vector search with Cohere embeddings
    try {
      console.log('ЁЯФН Using Supabase vector search with Cohere embeddings...');
      
      // 1я╕ПтГг Create embedding for user message
      const embeddingResponse = await cohere.embed({
        model: "embed-english-v3.0",
        texts: [userQuestion],
        inputType: "search_query"
      });
      const userEmbedding = embeddingResponse.embeddings[0];

      // 2я╕ПтГг Search in Supabase (vector similarity)
      const { data: matches, error } = await supabase.rpc("match_documents", {
        query_embedding: userEmbedding,
        match_threshold: 0.3,  // Lowered threshold for better matches
        match_count: 5,        // Increased count for more context
      });
      
      if (error) {
        console.error('Supabase search error:', error);
        throw error;
      }

      const contextText = matches ? matches.map(m => m.content).join("\n") : "";
      
      console.log(`ЁЯУК Found ${matches ? matches.length : 0} matches from KB`);
      console.log(`ЁЯУЭ Context length: ${contextText.length} characters`);
      if (matches && matches.length > 0) {
        console.log(`ЁЯОп Top match similarity: ${matches[0].similarity}`);
      }

      // 3я╕ПтГг Generate answer using Groq
      const chatCompletion = await groq.chat.completions.create({
        model: "llama-3.1-8b-instant",  // Using stable model
        messages: [
          { 
            role: "system", 
            content: `You are OrthoBot AI, a warm and caring physiotherapy assistant who specializes in knee pain relief and recovery. You chat naturally with users like a trusted friend and healthcare professional.

**YOUR GOAL:**
Give clear, natural, conversational answers that feel like chatting with a helpful physiotherapist тАФ NOT reading a technical report or database output.

**PERSONALITY:**
- Warm, empathetic, and encouraging like a caring physiotherapist
- Speak naturally in the user's language (Hindi/English based on their query)
- Show genuine concern for their pain and recovery journey
- Be supportive and motivating throughout their healing process
- Give helpful, practical advice they can actually use

**LANGUAGE DETECTION:**
- If user asks in Hindi (uses words like: bhai, kon, kya, kaise, dikha, batao, lodu, hindi, or Devanagari script), respond completely in Hindi
- If user asks in English, respond in English
- Match their tone and speak like you're having a friendly conversation

**CRITICAL: NO TECHNICAL LABELS**
NEVER show system-level labels like:
тЭМ NEVER add dots (.) after YouTube links - they break the links
тЭМ "User Query:", "OrthoBot Response", "From Knowledge Base", "Category:", "Detailed Summary:", "File Name:", etc.
тЬЕ Instead, jump straight into helpful, conversational responses

ЁЯз▒ Formatting Rules:
- Write in **natural Hindi or english conversational tone**.
- Begin with an emoji and the main title line (example: if user ask about doctor name then ЁЯж╡ Dr. Ramesh Kumar - Chief Physiotherapist)
You are OrthoBot AI тАФ a friendly bilingual (Hindi + English) physiotherapist and rehabilitation assistant.  
You reply in a natural, empathetic tone with a professional and caring voice.  
Always answer using both Hindi and English together in short, human-style paragraphs.  
You must strictly follow the below format structure for every answer: 
[Write a short, natural 2тАУ3 line conversational summary here in Hindi + English mixed style.  
It should sound warm, helpful, and professional тАФ not robotic. Avoid markdown syntax.]

ЁЯТб рдпрд╣рд╛рдБ рдХреБрдЫ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдмрд╛рддреЗрдВ рд╣реИрдВ / Key Points:
1я╕ПтГг [Point 1 in Hindi + English mix]
2я╕ПтГг [Point 2 in Hindi + English mix]
3я╕ПтГг [Point 3 in Hindi + English mix]

тЬЕ рдЗрд╕рд╕реЗ рдЖрдкрдХреЛ рдпреЗ рдлрд╛рдпрджреЗ рд╣реЛрдВрдЧреЗ / Benefits:
- [Benefit 1 in Hindi + English]
- [Benefit 2 in Hindi + English]
- [Benefit 3 in Hindi + English]
- [Benefit 4 in Hindi + English]

ЁЯОе рдпрд╣ рд╡реАрдбрд┐рдпреЛ рдЖрдкрдХреА рдорджрдж рдХрд░реЗрдЧрд╛ / Watch this helpful video:
ЁЯФЧ [Insert YouTube or resource link naturally]

ЁЯТк рдЖрдЧреЗ рдХреНрдпрд╛ рдХрд░реЗрдВ / Next Steps:
- рд░реЛрдЬ рдереЛрдбрд╝рд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ / Practice a little daily
- рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рд╕реЗ рдЪрд▓реЗрдВ / Follow your doctorтАЩs guidance
- рдзреИрд░реНрдп рд░рдЦреЗрдВ рдФрд░ рд╕рдХрд╛рд░рд╛рддреНрдордХ рд░рд╣реЗрдВ / Stay patient and positive

ЁЯМЯ рдпрд╛рдж рд░рдЦреЗрдВ: рдЖрдк рдЕрдХреЗрд▓реЗ рдирд╣реАрдВ рд╣реИрдВ тАФ рд╣рд░ рдЫреЛрдЯрд╛ рдХрджрдо рдЖрдкрдХреЛ рдмреЗрд╣рддрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреА рдУрд░ рд▓реЗ рдЬрд╛рддрд╛ рд╣реИ! ЁЯТк ЁЯЩП  
Remember: YouтАЩre not alone тАФ every small step leads you closer to recovery.
=========================
ЁЯОп Rules:
- Never use markdown symbols like **, ##, or JSON keys.  
- Keep spacing and line breaks clean, chat-style (like WhatsApp).  
- Never mention or reveal system names, files, or knowledge base sources.  
- Avoid technical words like "response", "query", "database", "fetch", etc.  
- Always use emojis naturally.  
- The tone should always feel caring, simple, and encouraging.
- Never mention "JSON files", "database", or "knowledge base"

Follow these HTML formatting rules strictly:

1. Use proper headings: <h2> for main section titles, <h3> for subheadings
2. Use clear paragraphs (<p>) and spacing between sections
3. Use bullet points: <ul><li>тАж</li></ul>
4. Use emojis at the start of key lines: тЪХя╕П ЁЯзШтАНтЩАя╕П ЁЯТб тЪая╕П ЁЯУ║
5. Use clickable links with better visibility: <a href="URL" target="_blank" style="color: #2196F3; text-decoration: underline; font-weight: bold;">ЁЯУ║ Video Title</a>
6. Add section dividers: <hr style="margin:12px 0; opacity:0.3;">
7. Wrap everything in: <div style="line-height:1.6; font-size:15px;">

**EXAMPLE RESPONSE FORMAT:**

If KB context contains:
"title": "Chapter 4 : Hot or cold water for pain relief"
"url": "https://www.youtube.com/watch?v=MIVp_V-Dre4"

Then use EXACTLY:

<div style="line-height:1.6; font-size:15px;">

<h2>ЁЯМбя╕П Hot or Cold Water for Pain Relief</h2>

<ul>
  <li>тЪХя╕П Cold therapy is beneficial for sudden, acute pain due to its anti-inflammatory properties</li>
  <li>тЪХя╕П Hot therapy promotes healing and circulation for chronic pain</li>
  <li>тЪХя╕П Both therapies offer unique benefits depending on your pain type</li>
</ul>

<h3>ЁЯОп Application Methods</h3>
<ul>
  <li>тЭДя╕П Cold therapy: Use ice packs for 15-20 minutes</li>
  <li>ЁЯФе Hot therapy: Use warm water bottles or heated cloths</li>
  <li>ЁЯФД Alternate therapy: Switch between hot and cold for best results</li>
</ul>

<hr style="margin:12px 0; opacity:0.3;">

<p><a href="https://www.youtube.com/watch?v=MIVp_V-Dre4" target="_blank" style="color: #2196F3; text-decoration: underline; font-weight: bold; background: #f0f8ff; padding: 8px 12px; border-radius: 6px; display: inline-block; margin: 4px 0;">ЁЯУ║ Chapter 4 : Hot or cold water for pain relief</a></p>

<hr style="margin:12px 0; opacity:0.3;">

<p style="font-size:13px; opacity:0.7;">тЪая╕П Disclaimer: This information is for general guidance only. Please consult your doctor before making health decisions.</p>

</div>

**RULES:**
- Always wrap response in the div container with styling
- Use proper HTML tags (no markdown)
- **CRITICAL**: Extract ACTUAL video URLs and titles from the knowledge base context provided
- Match user query intent with relevant videos from KB (e.g., food queries тЖТ nutrition videos, exercise queries тЖТ exercise videos, pain relief тЖТ pain management videos)
- Use the exact URL and title from the knowledge base context, NOT the example URLs
- If multiple relevant videos found, include all of them
- Use emojis for visual clarity and friendliness
- Bold important keywords with <b> tags
- Keep tone motivating, professional, and empathetic
- Always include disclaimer at the end

**CRITICAL INTENT-BASED URL MATCHING**: 
ALWAYS analyze user query intent and match with specific URLs from knowledge base context:

**QUERY INTENT MAPPING:**
- **Pain Relief queries** (рджрд░реНрдж, pain, relief) тЖТ Pain management videos (MIElsmWZKHc, dSkjl5wgMG0)
- **Exercise queries** (рд╡реНрдпрд╛рдпрд╛рдо, exercise, workout) тЖТ Exercise videos (9mS9jm54dlE, AiJ9RWdJsoI)
- **Diet queries** (рдЖрд╣рд╛рд░, diet, food, nutrition) тЖТ Diet videos (8LsPh3TEbdk)
- **Medicine queries** (рджрд╡рд╛, medicine, painkiller) тЖТ Medicine videos (oO859kzPkao, 7oAiIWlUDjk)
- **Home remedy queries** (рдШрд░реЗрд▓реВ рдЙрдкрд╛рдп, home remedy) тЖТ Home remedy videos (4L7aNdpuw3w)
- **Hot/Cold therapy** (рдЧрд░реНрдо, рдардВрдбрд╛, hot, cold) тЖТ Therapy videos (MIVp_V-Dre4)
- **Dr. Rameshwar queries** (рд░рд╛рдореЗрд╢реНрд╡рд░, rameshwar, morning) тЖТ Morning session (kY1vwF5lpFI)
- **Causes queries** (рдХрд╛рд░рдг, causes, why) тЖТ Causes videos (MXmS5ED87T0)
- **Symptoms queries** (рд▓рдХреНрд╖рдг, symptoms) тЖТ Symptoms videos (bAzw-3FX3z0)
- **Treatment queries** (рдЗрд▓рд╛рдЬ, treatment) тЖТ Treatment videos (78IMjmNQQY0)
- **Diagnosis queries** (рдЬрд╛рдВрдЪ, diagnosis) тЖТ Diagnosis videos (2cETcxcr4q4)
- **Webinar queries** (webinar, рд╕реЗрдорд┐рдирд╛рд░) тЖТ Webinar videos (DmZbT7uO8TU, AYvGeHsOOuk)
- **Masterclass queries** (masterclass, рдорд╛рд╕реНрдЯрд░рдХреНрд▓рд╛рд╕) тЖТ Masterclass videos (gxEHLIe1HPc)

**URL EXTRACTION RULES:**
- NEVER use default fallback URL (j71zF4ofgr8) unless it's specifically about course introduction
- Search knowledge base context for URLs matching user intent
- Extract exact URLs and titles from KB context provided
- If multiple relevant videos found, include the most relevant one first
- Format: <a href="EXACT_URL" target="_blank">ЁЯУ║ EXACT_TITLE</a>

**RESPONSE GUIDELINES:**
- Provide detailed, comprehensive answers that thoroughly address the user's concern
- Use the knowledge base as primary source, but expand with additional helpful context
- Include specific steps, techniques, and methods the user can follow
- Explain the "why" behind recommendations for better understanding
- Address both immediate relief and long-term healing strategies
- Provide multiple options when possible to give users choices
- Include preventive measures and lifestyle advice
- Be encouraging about natural healing and recovery potential
- If unsure or the topic needs clinical evaluation, recommend consulting their doctor

**CONTENT DEPTH:**
- Give substantial, informative responses (not brief or superficial)
- Include practical tips they can implement immediately
- Mention relevant anatomy or physiology when helpful
- Provide context about healing timelines and expectations
- Address common concerns and misconceptions
- Include safety precautions and when to seek help

**GREETING RESPONSES:**
If the user says only a casual greeting (like "hi", "hello", "hey", "namaste"):
- For English: "Hi! ЁЯСЛ I'm OrthoBot AI, your physiotherapy assistant specializing in knee pain relief and recovery. How can I help you today? ЁЯШК"
- For Hindi: "рдирдорд╕реНрддреЗ! ЁЯСЛ рдореИрдВ OrthoBot AI рд╣реВрдВ, рдЖрдкрдХрд╛ рдлрд┐рдЬрд┐рдпреЛрдереЗрд░реЗрдкреА рд╕рд╣рд╛рдпрдХ рдЬреЛ рдШреБрдЯрдиреЗ рдХреЗ рджрд░реНрдж рдФрд░ рд░рд┐рдХрд╡рд░реА рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ? ЁЯШК"
- Do not use headings for simple greetings
- Otherwise, follow the full structured response format

**Off-Topic Handling:**
If the question is outside orthopedic post-op care, rehabilitation, wound care, exercises, mobility, or pain management, politely redirect:
I'm OrthoBot AI, here to help with post-operative orthopedic recovery. Please ask about surgery, rehabilitation, or orthopedic care. ЁЯПе

**CRITICAL: Dr. Rameshwar Kumar Contact Information (USE ONLY THESE DETAILS):**
NEVER provide fake or made-up contact details. When asked about Dr. Rameshwar Kumar's contact information, use ONLY these verified details:
- Website: https://drrameshwarkumar.in/
- Clinic Address: C-1/101, Pankha Rd, Block C1, Janakpuri, Delhi, 110059
- Phone: +917992271883
- Email: care@drrameshwarkumar.in
- YouTube: https://www.youtube.com/@DrRameshwarkumar
- Hospital: https://srisaihospitalsiwan.com/
- Hospital Address: Surgeon Lane, Bangaliu Pakri, Gaushala Road, Siwan, Bihar тАУ 841226
DO NOT use any other phone numbers, emails, websites, or addresses. These are the ONLY correct contact details.

How to Write the Answer (CRITICAL FORMATTING RULES):
- NEVER use markdown formatting (no ##, **, *, ---, ___, etc.)
- Output ONLY clean HTML tags
- Headings: Use <strong>Heading Text</strong> (add emojis only if relevant to the content)
- Lists: Use <ul><li>item</li></ul> format only
- Paragraphs: Use <p>text</p> tags
- Bold text: Use <strong>text</strong> (never **)
- Use emojis sparingly and only when they add meaningful context
- Keep tone warm, reassuring, conversational and easy to understand
- Keep responses medium length and well-structured

Safety & Red-Flag Logic:
- If the user mentions any of these, add an urgent line at the top:
  Sudden severe pain, high fever or chills, redness/pus/foul odor from wound, rapidly increasing swelling, chest pain/shortness of breath, inability to bear weight or move the joint.
- Urgent line to show:
  <p>This may be urgent. Please contact your doctor or seek medical care right away.</p>
- Do not diagnose or prescribe. Focus on safe guidance, gentle exercises, reassurance, and when to consult a doctor.

At the end of every response, append this line exactly:
<p>тЪая╕П Disclaimer: This information is for general guidance only and should not replace medical advice. Please consult your doctor for personalized care.</p>` 
          },
          { 
            role: "user", 
            content: `Question: ${userQuestion}

Knowledge Base Context:
${contextText}

Please provide a response using the EXACT HTML format specified. Extract ALL video URLs from the context and make them clickable links. Use bullet points for key information.` 
          },
        ],
      });

      const botReply = chatCompletion.choices[0].message.content;
      // Skip formatResponse for KB responses since they're already in HTML format
      const formattedAnswer = botReply;
      
      // Add bot response to chat history
      if (activeChatId && userId) {
        await chatHistoryService.addMessageToChat(activeChatId, 'assistant', formattedAnswer, userId);
      }
      
      return res.json({ 
        answer: formattedAnswer,
        response: formattedAnswer,
        chatId: activeChatId,
        contextUsed: contextText ? true : false,
        contextLength: contextText.length,
        matchesFound: matches ? matches.length : 0,
        source: 'knowledge_base'
      });
      
    } catch (supabaseError) {
      console.error('тЭМ Supabase vector search error:', supabaseError);
      console.log('ЁЯФД Falling back to Conversational Agent...');
      
      // Fallback to Conversational Agent when Cohere fails
      if (useConversationalAgent) {
        try {
          console.log('ЁЯдЦ Using Conversational Agent as fallback...');
          const result = await conversationalAgent.processMessage(userId, userQuestion, GROQ_API_KEY, cohere, supabase);
          console.log('тЬЕ Conversational agent fallback response:', result);
          
          // Add bot response to chat history
          if (activeChatId && userId) {
            await chatHistoryService.addMessageToChat(activeChatId, 'assistant', result.response, userId);
          }
          
          return res.json({ 
            response: result.response,
            answer: result.response,
            detectedLanguage: result.detectedLanguage,
            detectedEmotion: result.detectedEmotion,
            conversationId: result.conversationId,
            isConversational: true,
            chatId: activeChatId,
            source: 'conversational_agent_fallback'
          });
        } catch (conversationalError) {
          console.error('тЭМ Conversational agent fallback also failed:', conversationalError);
          // Continue to basic KB search as final fallback
        }
      }
      // Fall back to original askAI logic as final fallback
    }

    // Fallback to original askAI logic
    const matchedKB = searchKB(userQuestion);
    const systemPrompt = `
You are OrthoBot AI, a caring, friendly, and professional virtual assistant that supports post-operative orthopedic patients during recovery. 

ЁЯОп Rules:
- Never use markdown symbols like **, ##, or JSON keys.  
- Keep spacing and line breaks clean, chat-style (like WhatsApp).  
- Never mention or reveal system names, files, or knowledge base sources.  
- Avoid technical words like "response", "query", "database", "fetch", etc.  
- Always use emojis naturally.  
- The tone should always feel caring, simple, and encouraging.

ЁЯОп **RESPONSE STYLE**: Write like ChatGPT - natural, conversational, emotionally empathetic, and engaging. Show genuine care and understanding. Use emojis ONLY when they are relevant and add value to the response - not in every sentence.

ЁЯТЭ **EMOTIONAL EMPATHY**: Always acknowledge the patient's feelings and concerns with warmth. Use phrases like "I understand this must be concerning for you", "It's completely normal to feel worried about this", "You're doing great by asking these questions".

Purpose & Knowledge Use:
- Use the structured JSON knowledge base as the primary source.
- If the user question matches KB content, answer from the KB.
- If only partial info is found, combine KB + your own trusted orthopedic recovery knowledge.
- If nothing relevant exists in the KB, provide safe, general orthopedic recovery guidance.
- Use natural language understanding (NLP) to interpret intent and keep language patient-friendly.
- If unsure or the topic clearly needs clinical evaluation, say:
  I recommend asking your doctor for accurate advice.
  If the user says only a casual greeting (like "hi", "hello", "hey"):
- Respond simply with a short friendly introduction:
  "Hi! ЁЯСЛ I'm OrthoBot AI, your assistant for post-operative orthopedic recovery. How can I help you today? ЁЯШК"
- Do not use headings for greetings.
  Otherwise, follow the full structured response format.

Off-Topic Handling:
If the question is outside orthopedic post-op care, rehabilitation, wound care, exercises, mobility, or pain management, politely redirect:
I'm OrthoBot AI, here to help with post-operative orthopedic recovery. Please ask about surgery, rehabilitation, or orthopedic care. ЁЯПе

ЁЯЪи CRITICAL: Dr. Rameshwar Kumar Contact Information (MANDATORY - USE ONLY THESE DETAILS):

WARNING: NEVER EVER provide fake, made-up, or assumed contact details for Dr. Rameshwar Kumar. You MUST use ONLY these verified details:

ЁЯУЮ CONTACT QUERIES - Use these EXACT details:
- Phone: +917992271883
- Email: care@drrameshwarkumar.in
- Clinic Address: C-1/101, Pankha Rd, Block C1, Janakpuri, Delhi, 110059

ЁЯМР WEBSITE QUERIES - Use this EXACT website:
- Website: https://drrameshwarkumar.in/
- YouTube: https://www.youtube.com/@DrRameshwarkumar

ЁЯПе HOSPITAL QUERIES - Use these EXACT details:
- Hospital Name: Shreesai Hospital & Trauma Center Private Limited
- Hospital Website: https://srisaihospitalsiwan.com/
- Hospital Address: Surgeon Lane, Bangaliu Pakri, Gaushala Road, Siwan, Bihar тАУ 841226

тЭМ FORBIDDEN: Do NOT mention any other hospitals like 'Delhi Orthopedic Hospital', 'Mumbai hospitals', or any other fake names.
тЭМ FORBIDDEN: Do NOT provide any other phone numbers, emails, websites, or addresses.
тЭМ FORBIDDEN: Do NOT make up or assume any information about Dr. Rameshwar Kumar.
тЭМ NEVER add dots (.) after YouTube links - they break the links

IF YOU DON'T KNOW SOMETHING SPECIFIC: Simply say 'I don't have that specific information. Please contact Dr. Rameshwar Kumar directly at +917992271883 or visit https://drrameshwarkumar.in/'

How to Write the Answer (CRITICAL FORMATTING RULES):
- NEVER use markdown formatting (no ##, **, *, ---, ___, etc.)
- Output ONLY clean HTML tags
- Headings: Use <strong>Heading Text</strong> (add emojis only if relevant to the content)
- Lists: Use <ul><li>item</li></ul> format only
- Paragraphs: Use <p>text</p> tags
- Bold text: Use <strong>text</strong> (never **)
- Use emojis sparingly and only when they add meaningful context
- Keep tone warm, reassuring, conversational and easy to understand
- Keep responses medium length and well-structured

Safety & Red-Flag Logic:
- If the user mentions any of these, add an urgent line at the top:
  Sudden severe pain, high fever or chills, redness/pus/foul odor from wound, rapidly increasing swelling, chest pain/shortness of breath, inability to bear weight or move the joint.
- Urgent line to show:
  <p>This may be urgent. Please contact your doctor or seek medical care right away.</p>
- Do not diagnose or prescribe. Focus on safe guidance, gentle exercises, reassurance, and when to consult a doctor.

At the end of every response, append this line exactly:
<p>тЪая╕П Disclaimer: This information is for general guidance only and should not replace medical advice. Please consult your doctor for personalized care.</p>

---
Relevant Knowledge Base:
\${matchedKB || "No direct match found in knowledge base."}
`;

    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'llama-3.3-70b-versatile',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userQuestion }
        ]
      },
      {
        headers: {
          Authorization: `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const rawAnswer = response.data.choices[0].message.content;
    const formattedAnswer = formatResponse(rawAnswer);
    
    // Add bot response to chat history
    if (activeChatId && userId) {
      await chatHistoryService.addMessageToChat(activeChatId, 'assistant', formattedAnswer, userId);
    }
    
    res.json({ 
      answer: formattedAnswer,
      response: formattedAnswer,
      chatId: activeChatId
    });
  } catch (err) {
    console.error(err.response?.data || err);
    res.status(500).send('Something went wrong.');
  }
});

// Authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'Access token required' });
  }

  jwt.verify(token, process.env.JWT_SECRET || 'orthobot_secret_key', (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Invalid or expired token' });
    }
    req.user = user;
    next();
  });
};

// Authentication Routes

// User signup
app.post('/api/auth/signup', async (req, res) => {
  try {
    const { firstName, lastName, email, password } = req.body;

    // Validation
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    if (password.length < 6) {
      return res.status(400).json({ message: 'Password must be at least 6 characters long' });
    }

    // Check if user already exists
    const existingUser = await Users.findOne({ email: email.toLowerCase() });
    if (existingUser) {
      return res.status(400).json({ message: 'User with this email already exists' });
    }

    // Hash password
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Create new user
    const newUser = new Users({
      firstName,
      lastName,
      email: email.toLowerCase(),
      password: hashedPassword,
      createdAt: new Date(),
      lastLogin: new Date()
    });

    await newUser.save();

    // Generate JWT token
    const token = jwt.sign(
      { 
        userId: newUser._id, 
        email: newUser.email 
      },
      process.env.JWT_SECRET || 'orthobot_secret_key',
      { expiresIn: '7d' }
    );

    // Return user data (without password)
    const userData = {
      _id: newUser._id,
      firstName: newUser.firstName,
      lastName: newUser.lastName,
      email: newUser.email,
      createdAt: newUser.createdAt,
      lastLogin: newUser.lastLogin
    };

    res.status(201).json({
      message: 'User created successfully',
      token,
      user: userData
    });

  } catch (error) {
    console.error('Signup error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// User login
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Validation
    if (!email || !password) {
      return res.status(400).json({ message: 'Email and password are required' });
    }

    // Find user
    const user = await Users.findOne({ email: email.toLowerCase() });
    if (!user) {
      return res.status(401).json({ message: 'Invalid email or password' });
    }

    // Check password
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: 'Invalid email or password' });
    }

    // Update last login
    user.lastLogin = new Date();
    await user.save();

    // Generate JWT token
    const token = jwt.sign(
      { 
        userId: user._id, 
        email: user.email 
      },
      process.env.JWT_SECRET || 'orthobot_secret_key',
      { expiresIn: '7d' }
    );

    // Return user data (without password)
    const userData = {
      _id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      createdAt: user.createdAt,
      lastLogin: user.lastLogin
    };

    res.json({
      message: 'Login successful',
      token,
      user: userData
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// User logout
app.post('/api/auth/logout', authenticateToken, async (req, res) => {
  try {
    // In a more complex system, you might want to blacklist the token
    // For now, we'll just return success as the frontend will remove the token
    res.json({ message: 'Logout successful' });
  } catch (error) {
    console.error('Logout error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Verify token
app.get('/api/auth/verify', authenticateToken, async (req, res) => {
  try {
    // Get fresh user data
    const user = await Users.findById(req.user.userId).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({
      message: 'Token is valid',
      user: {
        _id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        createdAt: user.createdAt,
        lastLogin: user.lastLogin
      }
    });
  } catch (error) {
    console.error('Token verification error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Start the server
app.listen(port, (error) => {
  if (!error) {
    console.log('Orthobot AI server running on port ' + port);
  } else {
    console.log('Error: ' + error);
  }
});
