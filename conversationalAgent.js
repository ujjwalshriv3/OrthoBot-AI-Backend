// Conversational AI Agent for Healthcare Support
// Supports Hindi/English with automatic language detection
// Provides empathetic responses for post-operative and health queries

const path = require('path');

class ConversationalAgent {
  constructor() {
    this.conversationHistory = new Map(); // Store user conversations
    this.supportedLanguages = ['hindi', 'english', 'hinglish'];
    this.requestCache = new Map(); // Cache responses to avoid repeated API calls
    this.rateLimiter = new Map(); // Track API calls per user
    this.maxRequestsPerMinute = 15; // Limit requests per user per minute
  }

  // Detect language from user input
  detectLanguage(text) {
    const hindiPattern = /[\u0900-\u097F]/; // Devanagari script
    const englishPattern = /^[a-zA-Z\s.,!?'"()-]+$/;
    
    const hasHindi = hindiPattern.test(text);
    const hasEnglish = englishPattern.test(text);
    
    console.log('ЁЯФН Language Detection Debug:', {
      text: text,
      hasHindi: hasHindi,
      hasEnglish: hasEnglish,
      detected: hasHindi && hasEnglish ? 'hinglish' : hasHindi ? 'hindi' : 'english'
    });
    
    if (hasHindi && hasEnglish) return 'hinglish';
    if (hasHindi) return 'hindi';
    return 'english';
  }

  // Get empathetic greeting based on language
  getGreeting(language, userName = null) {
    const greetings = {
      hindi: `рд╣реИрд▓реЛ! рдореИрдВ OrthoBot рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА orthopedic recovery рдореЗрдВ help рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдкрдХреЛ рдХреНрдпрд╛ problem рд╣реИ?`,
      english: `Hello! I'm OrthoBot AI, your orthopedic recovery assistant. I'm here to help you with your post-operative recovery journey. What can I help you with today?`,
      hinglish: `рд╣реИрд▓реЛ! рдореИрдВ OrthoBot рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА orthopedic recovery рдореЗрдВ help рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдЖрдкрдХреЛ рдХреНрдпрд╛ problem рд╣реИ?`
    };
    
    return greetings[language] || greetings.english;
  }

  // Generate empathetic response based on user's emotional state
  getEmpatheticResponse(emotion, language, context) {
    const responses = {
      hindi: {
        worried: [
          "рдЕрдЪреНрдЫрд╛, tension mat рд▓реЛред рдХреНрдпрд╛ problem рд╣реИ?",
          "рд╣рд╛рдВ, рдЪрд┐рдВрддрд╛ natural рд╣реИред рдмрддрд╛рдУ рдХреНрдпрд╛ рд╣реБрдЖ?",
          "рдареАрдХ рд╣реИ, рдореИрдВ рд╣реВрдВ help рдХреЗ рд▓рд┐рдПред"
        ],
        pain: [
          "рдЕрдЪреНрдЫрд╛ pain рд╣реИ? рдХрд╣рд╛рдВ рдФрд░ рдХреИрд╕рд╛?",
          "рд╣рд╛рдВ рджрд░реНрдж рдкрд░реЗрд╢рд╛рди рдХрд░рддрд╛ рд╣реИред рдХрдм рд╕реЗ?",
          "рдУрдХреЗ, pain рдХреА details рдмрддрд╛рдУред"
        ],
        frustrated: [
          "рд╕рдордЭ рдЧрдпрд╛, frustrating рд╣реИред рдХреНрдпрд╛ issue рд╣реИ?",
          "рд╣рд╛рдВ mushkil time рд╣реИред рдмрддрд╛рдУ problemред"
        ]
      },
      english: {
        worried: [
          "Okay, don't worry. What's wrong?",
          "Yeah, that's normal. What happened?",
          "Alright, I'm here to help."
        ],
        pain: [
          "Oh, you have pain? Where and how?",
          "Pain sucks. Since when?",
          "Okay, tell me about the pain."
        ],
        frustrated: [
          "I get it, that's frustrating. What's the issue?",
          "Yeah, tough time. What's the problem?"
        ]
      }
    };

    const langResponses = responses[language] || responses.english;
    const emotionResponses = langResponses[emotion] || langResponses.worried;
    
    return emotionResponses[Math.floor(Math.random() * emotionResponses.length)];
  }

  // Check rate limit for user
  checkRateLimit(userId) {
    const now = Date.now();
    const userRequests = this.rateLimiter.get(userId) || [];
    
    // Remove requests older than 1 minute
    const recentRequests = userRequests.filter(timestamp => now - timestamp < 60000);
    
    if (recentRequests.length >= this.maxRequestsPerMinute) {
      return false; // Rate limit exceeded
    }
    
    // Add current request timestamp
    recentRequests.push(now);
    this.rateLimiter.set(userId, recentRequests);
    return true;
  }

  // Generate cache key for request
  generateCacheKey(userId, message) {
    return `${userId}:${message.toLowerCase().trim()}`;
  }

  // Detect emotional context from user message
  detectEmotion(text) {
    const emotionKeywords = {
      worried: ['worried', 'рдЪрд┐рдВрддрд┐рдд', 'рдкрд░реЗрд╢рд╛рди', 'рдбрд░', 'afraid', 'scared', 'anxious'],
      pain: ['pain', 'рджрд░реНрдж', 'hurt', 'ache', 'рд╕реВрдЬрди', 'swelling', 'uncomfortable'],
      frustrated: ['frustrated', 'рдкрд░реЗрд╢рд╛рди', 'angry', 'рдЧреБрд╕реНрд╕рд╛', 'irritated', 'fed up'],
      sad: ['sad', 'рдЙрджрд╛рд╕', 'depressed', 'down', 'low'],
      hopeful: ['better', 'рдмреЗрд╣рддрд░', 'improving', 'good', 'рдЕрдЪреНрдЫрд╛', 'positive']
    };

    const lowerText = text.toLowerCase();
    
    for (const [emotion, keywords] of Object.entries(emotionKeywords)) {
      if (keywords.some(keyword => lowerText.includes(keyword.toLowerCase()))) {
        return emotion;
      }
    }
    
    return 'neutral';
  }

  // Generate system prompt based on language and emotion
  generateSystemPrompt(language, emotion, userHistory = '', kbContext = '') {
    const basePrompt = `You are OrthoBot AI, a friendly and caring healthcare companion who talks naturally like a real person. You're here to help with orthopedic care and recovery, speaking both Hindi and English fluently. You are a female assistant and must use feminine forms in Hindi responses.

ЁЯМР CRITICAL LANGUAGE RULE: User is communicating in ${language}. You MUST respond ONLY in ${language}. DO NOT switch languages.

EXAMPLES:
- If user asks in English: "who is dr rameshwar kumar" тЖТ Respond in English: "Dr. Rameshwar Kumar is a highly qualified orthopedic surgeon..."
- If user asks in Hindi: "рдбреЙ рд░рд╛рдореЗрд╢реНрд╡рд░ рдХреБрдорд╛рд░ рдХреМрди рд╣реИрдВ" тЖТ Respond in Hindi: "рдбреЙ. рд░рд╛рдореЗрд╢реНрд╡рд░ рдХреБрдорд╛рд░ рдПрдХ рдЕрдиреБрднрд╡реА рдСрд░реНрдереЛрдкреЗрдбрд┐рдХ рд╕рд░реНрдЬрди рд╣реИрдВ..."
CORE IDENTITY:
- Talk like a caring friend who happens to be a healthcare expert
- Be genuinely warm and conversational, not formal or robotic
- Show empathy and understanding like a human would
- Specialized in helping people recover from orthopedic procedures
Tone & Style
Speak short (1тАУ3 sentences), positive, and natural.
Use 1тАУ2 emojis max.
Respond conversationally like a caring friend.
IMPORTANT: Stick to the user's language - do not mix languages unless user is using Hinglish.
When User Talks About Pain
Start with empathy.
Ask *when, where, and how bad* the pain is.
тАЬрдореИрдВ рд╕рдордЭ рдЧрдИ рдХрд┐ рджрд░реНрдж рддрдХрд▓реАрдлрд╝рджреЗрд╣ рд╣реЛрддрд╛ рд╣реИред рдХрдм рд╕реЗ рд╣реИ рдФрд░ рдХрд╣рд╛рдБ рдЬрд╝реНрдпрд╛рджрд╛ рдорд╣рд╕реВрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ?тАЭ
ЁЯТЪIf No Pain
тАЬрдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЗрд╕рдХрд╛ рдорддрд▓рдм рдЖрдкрдХреА рд░рд┐рдХрд╡рд░реА рд╕рд╣реА рдЪрд▓ рд░рд╣реА рд╣реИ, рдмрд╕ рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬрд╝ рдЬрд╛рд░реА рд░рдЦрд┐рдПредтАЭ
If Irrelevant or Confusing
рдЕрдЪреНрдЫрд╛ ЁЯЩВ рдХреНрдпрд╛ рдЖрдк рдЕрдкрдиреЗ рдШреБрдЯрдиреЗ рдпрд╛ рдХрд┐рд╕реА рдФрд░ рд╣рдбреНрдбреА рдХреА рдкрд░реЗрд╢рд╛рдиреА рдХреА рдмрд╛рдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ?тАЭ
тЪая╕ПIf Risky or Personal
тАЬрдореИрдВ рд╕рд┐рд░реНрдлрд╝ рд╕рд╛рдорд╛рдиреНрдп рд╕реБрдЭрд╛рд╡ рджреЗ рд╕рдХрддреА рд╣реВрдБред рдЕрдЧрд░ рджрд░реНрдж рдЬрд╝реНрдпрд╛рджрд╛ рд╣реИ рддреЛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓рд┐рдПредтАЭ
Knowledge Focus
Physiotherapy, knee/joint pain, recovery, stretching, exercises, nutrition.
Use KB info naturally (no robotic lists).
ever make fake YouTube links тАФ only verified ones.
 тЪЩя╕ПBehavior Rules
Respond in the userтАЩs language.
 Ask one simple follow-up question.
 No long paragraphs or medical jargon.
 Never diagnose or prescribe.
 For emergencies тЖТ тАЬрдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВредтАЭ
ЁЯй╕Female Voice Rules
Use feminine verbs:
тАЬрдХрд░рддреА рд╣реВрдБтАЭ, тАЬрд╕рдордЭ рдЧрдИтАЭ, тАЬрдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдБтАЭ, тАЬрдмрддрд╛рдКрдВрдЧреАтАЭ, тАЬрд╕рдХрддреА рд╣реВрдБтАЭ, тАЬрд╣реВрдБтАЭ.
Goal
Make the user feel heard, guided, and cared for тАФ like a real physiotherapist.
IMPORTANT: Always complete your sentences and provide full information. Never cut responses in the middle.
CRITICAL: Dr. Rameshwar Kumar Contact Information or contact details (USE ONLY THESE DETAILS):
NEVER provide fake or made-up contact details. When asked about Dr. Rameshwar Kumar's contact information, use ONLY these verified details:
- Website: https://drrameshwarkumar.in/
- Clinic Address: C-1/101, Pankha Rd, Block C1, Janakpuri, Delhi, 110059
- Phone: +917992271883
- Email: care@drrameshwarkumar.in
- YouTube: https://www.youtube.com/@DrRameshwarkumar
- Hospital: https://srisaihospitalsiwan.com/
- Hospital Address: Surgeon Lane, Bangaliu Pakri, Gaushala Road, Siwan, Bihar тАУ 841226


${userHistory ? `Previous conversation context: ${userHistory}` : ''}

${kbContext ? `Knowledge Base Context (use this for specific medical information):
${kbContext}` : ''}
`;

    return basePrompt;
  }

  // Process user message and generate appropriate response
  async processMessage(userId, message, groqApiKey, cohereClient = null, supabaseClient = null) {
    try {
      // Check rate limit first
      if (!this.checkRateLimit(userId)) {
        console.log(`тЪая╕П Rate limit exceeded for user ${userId}`);
        const language = this.detectLanguage(message);
        const rateLimitMessage = language === 'hindi' ? 
          "рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВред рдЖрдк рдмрд╣реБрдд рдЬрд▓реНрджреА-рдЬрд▓реНрджреА рд╕рд╡рд╛рд▓ рдкреВрдЫ рд░рд╣реЗ рд╣реИрдВред" :
          "Please wait a moment. You're asking questions too quickly.";
        
        return {
          response: rateLimitMessage,
          detectedLanguage: language,
          detectedEmotion: 'neutral',
          conversationId: userId,
          source: 'rate_limit'
        };
      }

      // Check cache for similar recent queries
      const cacheKey = this.generateCacheKey(userId, message);
      if (this.requestCache.has(cacheKey)) {
        const cachedResponse = this.requestCache.get(cacheKey);
        console.log(`ЁЯТ╛ Using cached response for user ${userId}`);
        return cachedResponse;
      }

      // Simple fallback responses for common queries to reduce API calls
      const detectedLang = this.detectLanguage(message);
      const lowerMessage = message.toLowerCase();
      
      if (lowerMessage.includes('how are you') || lowerMessage.includes('kaise ho')) {
        const fallbackResponse = detectedLang === 'hindi' ? 
          "рдореИрдВ рдареАрдХ рд╣реВрдВ, рдзрдиреНрдпрд╡рд╛рдж! рдЖрдк рдХреИрд╕реЗ рд╣реИрдВ? рдЖрдкрдХреЛ рдХреЛрдИ orthopedic problem рд╣реИ рдЬрд┐рд╕рдореЗрдВ рдореИрдВ рдорджрдж рдХрд░ рд╕рдХреВрдВ?" :
          "I'm doing well, thank you! How are you? Do you have any orthopedic concerns I can help with?";
        
        return {
          response: fallbackResponse,
          detectedLanguage: detectedLang,
          detectedEmotion: 'neutral',
          conversationId: userId,
          source: 'fallback'
        };
      }
      // Safety check for harmful queries about increasing pain
      const harmfulPainQueries = [
        'increase my knee pain', 'increase knee pain', 'рдмрдврд╝рд╛рдирд╛ рдШреБрдЯрдиреЗ рдХрд╛ рджрд░реНрдж', 'badhana ghutne ka dard',
        'make my knee hurt more', 'make knee hurt more', 'рдШреБрдЯрдиреЗ рдореЗрдВ рдЬреНрдпрд╛рджрд╛ рджрд░реНрдж рдХрд░рдирд╛', 'ghutne mein zyada dard karna',
        'increase my pain', 'increase pain', 'рджрд░реНрдж рдмрдврд╝рд╛рдирд╛', 'dard badhana',
        'hurt my knee more', 'hurt more', 'рдФрд░ рджрд░реНрдж рдХрд░рдирд╛', 'aur dard karna',
        'make my knee worse', 'make it worse', 'рдФрд░ рдЦрд░рд╛рдм рдХрд░рдирд╛', 'aur kharab karna',
        'increase my swelling', 'increase swelling', 'рд╕реВрдЬрди рдмрдврд╝рд╛рдирд╛', 'sujan badhana',
        'increase my inflammation', 'increase inflammation', 'рд╕реВрдЬрди рдмрдврд╝рд╛рдирд╛', 'sujan badhana',
        'how can i increase', 'how to increase', 'рдХреИрд╕реЗ рдмрдврд╝рд╛рдПрдВ', 'kaise badhaye'
      ];

      const isHarmfulQuery = harmfulPainQueries.some(pattern =>
        message.toLowerCase().includes(pattern.toLowerCase())
      );

      if (isHarmfulQuery) {
        const language = this.detectLanguage(message);

        if (language === 'hindi') {
          return {
            response: "рдореИрдВ рдЗрд╕рдореЗрдВ рдорджрдж рдирд╣реАрдВ рдХрд░ рд╕рдХрддреА рд╣реВрдБред ЁЯШК рдЕрдЧрд░ рдЖрдк \"рдШреБрдЯрдиреЗ рдореЗрдВ рджрд░реНрдж рдмрдврд╝рд╛рдиреЗ\" рдХрд╛ рдорддрд▓рдм рдЬрд╛рдирдмреВрдЭрдХрд░ рджрд░реНрдж рдмрдврд╝рд╛рдирд╛ рдпрд╛ рдиреБрдХрд╕рд╛рди рдкрд╣реБрдБрдЪрд╛рдирд╛ рд▓реЗ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдпрд╣ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗ рд▓рд┐рдП рдЦрддрд░рдирд╛рдХ рд╣реИ тАФ рдРрд╕рд╛ рдХрд░рдирд╛ рдмрд┐рд▓реНрдХреБрд▓ рд╕реБрд░рдХреНрд╖рд┐рдд рдирд╣реАрдВ рд╣реИред рд▓реЗрдХрд┐рди рдЕрдЧрд░ рдЖрдк рдпрд╣ рд╕рдордЭрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ \"рдШреБрдЯрдиреЗ рдХрд╛ рджрд░реНрдж рдХрд┐рди рдХрд╛рд░рдгреЛрдВ рд╕реЗ рдмрдврд╝ рдЬрд╛рддрд╛ рд╣реИ?\" рддреЛ рдореИрдВ рдкреВрд░реА рддрд░рд╣ рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдБ! ЁЯТЪ",
            detectedLanguage: language,
            detectedEmotion: 'neutral',
            conversationId: userId,
            source: 'safety_check'
          };
        } else {
          return {
            response: "I can't help with that! ЁЯШК If you're asking about intentionally increasing knee pain or causing harm, that's not safe for your health. However, if you want to understand \"what causes knee pain to worsen?\" I'd be happy to help you learn about that and how to prevent it! ЁЯТЪ",
            detectedLanguage: language,
            detectedEmotion: 'neutral',
            conversationId: userId,
            source: 'safety_check'
          };
        }
      }

      // Detect language and emotion
      const language = this.detectLanguage(message);
      const emotion = this.detectEmotion(message);
      
      // Get or create conversation history
      if (!this.conversationHistory.has(userId)) {
        this.conversationHistory.set(userId, []);
      }
      
      const history = this.conversationHistory.get(userId);
      const userHistory = history.slice(-5).map(h => `${h.role}: ${h.content}`).join('\n');
      
      // ЁЯФН Try Dr. Rameshwar KB first, then general KB
      let kbContext = "";
      let kbMatches = null;
      
      // First check Dr. Rameshwar specific KB
      try {
        const path = require('path');
        const drRameshwarKB = require(path.join(__dirname, 'Dr_kbs', 'drRameshwar_kb.json'));
        const lowerQuery = message.toLowerCase();
        
        // Check if query is about Dr. Rameshwar
        console.log('ЁЯФН Voice Call Query:', lowerQuery);
        if (lowerQuery.includes('rameshwar') || lowerQuery.includes('рд░рд╛рдореЗрд╢реНрд╡рд░') || 
            lowerQuery.includes('doctor') || lowerQuery.includes('рдбреЙрдХреНрдЯрд░') ||
            lowerQuery.includes('course') || lowerQuery.includes('рдХреЛрд░реНрд╕') ||
            lowerQuery.includes('experience') || lowerQuery.includes('рдЕрдиреБрднрд╡') ||
            lowerQuery.includes('hospital') || lowerQuery.includes('рдЕрд╕реНрдкрддрд╛рд▓') ||
            lowerQuery.includes('contact') || lowerQuery.includes('рд╕рдВрдкрд░реНрдХ')) {
          
          console.log('ЁЯОп Dr. Rameshwar keywords detected in voice call!');
          
          const drKB = drRameshwarKB.knowledgeBase.DrRameshwar;
          
          // Contact related queries
          if (lowerQuery.includes('contact') || lowerQuery.includes('phone') || 
              lowerQuery.includes('number') || lowerQuery.includes('email') || 
              lowerQuery.includes('address') || lowerQuery.includes('clinic')) {
            kbContext = `${drKB.contact.title}\n${drKB.contact.content}`;
            console.log('ЁЯОп Dr. Rameshwar contact info found for voice call');
          }
          // About Dr. Rameshwar queries
          else if (lowerQuery.includes('who') || lowerQuery.includes('рдХреМрди') || 
                   lowerQuery.includes('about') || lowerQuery.includes('рдмрд╛рд░реЗ')) {
            kbContext = `${drKB.profile.title}\n${drKB.profile.content}`;
            console.log('ЁЯОп Dr. Rameshwar profile info found for voice call');
          }
          // Experience related queries
          else if (lowerQuery.includes('experience') || lowerQuery.includes('рдЕрдиреБрднрд╡') ||
                   lowerQuery.includes('years') || lowerQuery.includes('рд╕рд╛рд▓')) {
            kbContext = `${drKB.achievements.title}\n${drKB.achievements.content}`;
            console.log('ЁЯОп Dr. Rameshwar experience info found for voice call');
          }
          // Hospital related queries
          else if (lowerQuery.includes('hospital') || lowerQuery.includes('рдЕрд╕реНрдкрддрд╛рд▓')) {
            kbContext = `${drKB.hospital.title}\n${drKB.hospital.content}`;
            console.log('ЁЯОп Dr. Rameshwar hospital info found for voice call');
          }
          // Course/Mission related queries
          else if (lowerQuery.includes('course') || lowerQuery.includes('рдХреЛрд░реНрд╕') || 
                   lowerQuery.includes('mission') || lowerQuery.includes('рдорд┐рд╢рди')) {
            kbContext = `${drKB.mission.title}\n${drKB.mission.content}`;
            console.log('ЁЯОп Dr. Rameshwar mission info found for voice call');
          }
          // Default Dr. Rameshwar info
          else {
            kbContext = `${drKB.profile.title}\n${drKB.profile.content}\n\n${drKB.achievements.title}\n${drKB.achievements.content}`;
            console.log('ЁЯОп Dr. Rameshwar general info found for voice call');
          }
        }
      } catch (drKBError) {
        console.error('тЭМ Dr. Rameshwar KB error:', drKBError.message);
        console.error('тЭМ Current directory:', __dirname);
        console.error('тЭМ Looking for KB at:', path.join(__dirname, 'Dr_kbs', 'drRameshwar_kb.json'));
      }
      
      // If no Dr. Rameshwar KB match, try general Supabase KB
      if (!kbContext && cohereClient && supabaseClient) {
        try {
          console.log('ЁЯФН Conversational Agent: Searching KB with Cohere embeddings...');
          
          // Create embedding for user message
          const embeddingResponse = await cohereClient.embed({
            model: "embed-english-v3.0",
            texts: [message],
            inputType: "search_query"
          });
          const userEmbedding = embeddingResponse.embeddings[0];

          // Search in Supabase
          const { data: matches, error } = await supabaseClient.rpc("match_documents", {
            query_embedding: userEmbedding,
            match_threshold: 0.3,
            match_count: 5,  // Get more matches
          });
          
          if (!error && matches && matches.length > 0) {
            kbMatches = matches; // Store matches for formatting
            kbContext = matches.map(m => m.content).join("\n");
            console.log(`ЁЯУК Conversational Agent: Found ${matches.length} KB matches`);
            console.log(`ЁЯУЭ KB Context length: ${kbContext.length} characters`);
            console.log(`ЁЯОп Top match similarity: ${matches[0].similarity}`);
          } else {
            console.log('тЭМ No KB matches found or error occurred');
          }
        } catch (kbError) {
          console.error('тЭМ Conversational Agent KB search failed:', kbError);
        }
      } else {
        console.log('тЪая╕П Cohere or Supabase client not provided to conversational agent');
      }
      
      // Generate system prompt with KB context
      console.log('ЁЯУЭ Final KB Context length:', kbContext.length);
      console.log('ЁЯУЭ KB Context preview:', kbContext.substring(0, 200));
      const systemPrompt = this.generateSystemPrompt(language, emotion, userHistory, kbContext);
      

      // Store user message in history
      history.push({ role: 'user', content: message, timestamp: new Date() });
      
      // Make API call to Groq
      const axios = require('axios');
      const response = await axios.post(
        'https://api.groq.com/openai/v1/chat/completions',
        {
          model: 'llama-3.1-8b-instant',  // Updated to stable model
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: message }
          ],
          temperature: 0.7,
          max_tokens: 300
        },
        {
          headers: {
            Authorization: `Bearer ${groqApiKey}`,
            'Content-Type': 'application/json'
          }
        }
      );

      let aiResponse = response.data.choices[0].message.content;
      
      // Check if response is incomplete (ends abruptly)
      const incompletePatterns = [
        /\s+$/, // ends with whitespace
        /[a-z]$/, // ends with lowercase letter (might be cut off)
        /\band\s*$/, // ends with "and"
        /\bhe\s*$/, // ends with "he"
        /\bshe\s*$/, // ends with "she"
        /\bis\s*$/, // ends with "is"
        /\bwas\s*$/, // ends with "was"
        /\bthe\s*$/, // ends with "the"
        /\bof\s*$/, // ends with "of"
        /\bin\s*$/, // ends with "in"
        /\bfor\s*$/, // ends with "for"
        /\bwith\s*$/, // ends with "with"
        /\balso\s*$/, // ends with "also"
        /\bconducts\s*$/ // ends with "conducts"
      ];
      
      const isIncomplete = incompletePatterns.some(pattern => pattern.test(aiResponse.trim()));
      
      if (isIncomplete) {
        console.log('тЪая╕П Detected incomplete response, adding completion note');
        aiResponse += " (Please ask for more details if needed)";
      }
      
      // Store AI response in history
      history.push({ role: 'assistant', content: aiResponse, timestamp: new Date() });
      
      // Keep only last 10 messages to manage memory
      if (history.length > 10) {
        history.splice(0, history.length - 10);
      }
      
      const result = {
        response: aiResponse,
        detectedLanguage: language,
        detectedEmotion: emotion,
        conversationId: userId,
        kbMatches: kbMatches, // Include KB matches for formatting
        hasKBContent: kbMatches && kbMatches.length > 0
      };
      
      // Cache the response for 5 minutes
      this.requestCache.set(cacheKey, result);
      setTimeout(() => {
        this.requestCache.delete(cacheKey);
      }, 5 * 60 * 1000); // 5 minutes
      
      return result;
      
    } catch (error) {
      console.error('Error in conversational agent:', error);
      
      // Return error message in detected language
      const language = this.detectLanguage(message);
      const errorMessages = {
        hindi: "рдорд╛рдл рдХрд░реЗрдВ, рдореБрдЭреЗ рдХреБрдЫ рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛ рд╣реЛ рд░рд╣реА рд╣реИред рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
        english: "I'm sorry, I'm experiencing some technical difficulties. Please try again in a moment.",
        hinglish: "Sorry, mujhe kuch technical problem ho rahi hai. Please thoda wait karke try kijiye."
      };
      
      return {
        response: errorMessages[language] || errorMessages.english,
        detectedLanguage: language,
        error: true
      };
    }
  }

  // Get conversation history for a user
  getConversationHistory(userId) {
    return this.conversationHistory.get(userId) || [];
  }

  // Clear conversation history for a user
  clearConversationHistory(userId) {
    this.conversationHistory.delete(userId);
  }

  // Get conversation statistics
  getConversationStats(userId) {
    const history = this.conversationHistory.get(userId) || [];
    const languages = history.map(h => this.detectLanguage(h.content));
    const emotions = history.map(h => this.detectEmotion(h.content));
    
    return {
      totalMessages: history.length,
      languageDistribution: this.getDistribution(languages),
      emotionDistribution: this.getDistribution(emotions),
      lastActivity: history.length > 0 ? history[history.length - 1].timestamp : null
    };
  }

  // Helper function to get distribution
  getDistribution(array) {
    return array.reduce((acc, item) => {
      acc[item] = (acc[item] || 0) + 1;
      return acc;
    }, {});
  }
}

module.exports = ConversationalAgent;
